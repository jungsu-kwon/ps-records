{"id":333813633,"lang":"python3","time":"1 year, 3 months","timestamp":1588518407,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/333813633/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"16.7 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        fast,slow = head,head\n        while fast != None and slow != None : \n            slow = slow.next\n            if fast.next != None : \n                fast = fast.next.next\n            else :\n                return None\n            if fast != None and slow == fast : \n                while slow != head :\n                    head = head.next\n                    slow = slow.next\n                return slow\n        return None \n                ","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}