// https://leetcode.com/problems/linked-list-cycle-ii

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        fast,slow = head,head
        while fast != None and slow != None : 
            slow = slow.next
            if fast.next != None : 
                fast = fast.next.next
            else :
                return None
            if fast != None and slow == fast : 
                while slow != head :
                    head = head.next
                    slow = slow.next
                return slow
        return None 
                