{"id":493411418,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1621076440,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/493411418/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.6 MB","code":"#include <iostream>\nusing namespace std;\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        auto fast = head;\n        auto slow = head;\n\n        ListNode* meeting_point = nullptr;\n        while (fast != nullptr)\n        {\n            slow = slow -> next;\n            fast = fast -> next ? fast -> next -> next : nullptr;\n            if (slow != nullptr && fast == slow)\n            {\n                meeting_point = slow;\n                break;\n            }\n\n        }\n\n        if (meeting_point == nullptr)\n            return nullptr;\n        \n        auto from_head = head;\n        auto from_meet = meeting_point;\n\n        while (from_head != from_meet)\n        {\n            from_head = from_head -> next;\n            from_meet = from_meet -> next;\n        }\n        return from_head;\n        \n\n        \n    }\n};","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}