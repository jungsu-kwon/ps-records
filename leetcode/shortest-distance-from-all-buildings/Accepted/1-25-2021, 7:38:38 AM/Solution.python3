// https://leetcode.com/problems/shortest-distance-from-all-buildings

from collections import defaultdict
class Solution:
    def shortestDistance(self, grid: List[List[int]]) -> int:
        houses = []
        height,width = len(grid),len(grid[0])
        for i in range(height):
            for j in range(width):
                if grid[i][j] == 1:
                    houses.append((i,j))

        computeMin = False
        distDict = defaultdict(lambda: (0,0)) 
        minDist = float(inf)
        for i,house in enumerate(houses):
            bfs = [house]
            visited = set()

            dist = 0
            if i == len(houses)-1:
                computeMin = True
            while bfs:
                n = len(bfs)

                for i in range(n):
                    i,j = bfs.pop(0)
                    
                    if (i,j) in visited:
                        continue
                    for neighbor in [(i+1,j),(i-1,j),(i,j+1),(i,j-1)]:
                        
                        if neighbor[0] < 0 or neighbor[0] >= height:
                            continue
                        if neighbor[1] < 0 or neighbor[1] >= width:
                            continue
                        if grid[neighbor[0]][neighbor[1]] == 0:
                            bfs.append(neighbor)
                            
                    if grid[i][j] == 0:
                        d,count = distDict[(i,j)]
                        distDict[(i,j)] = (d+dist,count+1)
                        if computeMin and distDict[(i,j)][1] == len(houses):
                            minDist = min(minDist,distDict[(i,j)][0])

                    visited.add((i,j))
                    
                dist += 1 

        if minDist == float(inf):
            return -1
        return minDist











        