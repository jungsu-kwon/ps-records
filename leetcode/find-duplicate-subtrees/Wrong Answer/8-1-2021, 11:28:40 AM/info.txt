{"id":531333137,"lang":"python3","time":"2 days, 6 hours","timestamp":1627784920,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/531333137/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"N/A","code":"from typing import List, Dict\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def treeHash(self, root: TreeNode) -> str:\n        hashVal: str = \"\"\n        if not root: return hashVal\n\n        if leftHash := self.treeHash(root.left): \n            hashVal = leftHash\n            hashVal += \",\" + str(root.val)\n        else: hashVal = str(root.val)\n\n        if rightHash := self.treeHash(root.right):\n            hashVal += \",\" + rightHash\n        \n        if hashVal in self.hash:\n            self.ans[hashVal] = root\n\n        self.hash[hashVal] = root\n        return hashVal\n\n        \n\n\n    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:\n        self.hash: Dict[str,TreeNode] = {}\n        self.ans: Dict[str,TreeNode] = {}\n        self.treeHash(root)\n        return self.ans.values()","compare_result":"1111011011111111111001111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111110111111111101011111111111111100001011001011011011010000010000","title_slug":"find-duplicate-subtrees"}