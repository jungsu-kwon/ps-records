{"id":531396842,"lang":"python3","time":"2Â days, 4Â hours","timestamp":1627791687,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/531396842/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"28.5 MB","code":"from typing import List, Dict\n\nclass Solution:\n\n    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:\n        # hash: Dict[str,TreeNode] = {}\n        ans: List[TreeNode] = defaultdict(list)\n        def treeHash(root: TreeNode):\n            if not root: return \"null\"\n            hashVal = f\"{root.val},{treeHash(root.left)},{treeHash(root.right)}\"\n            ans[hashVal].append(root)\n            return hashVal\n\n        treeHash(root)\n        return [node[0] for node in ans.values() if len(node) > 1]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees"}