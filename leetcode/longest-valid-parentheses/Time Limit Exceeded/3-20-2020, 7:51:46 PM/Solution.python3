// https://leetcode.com/problems/longest-valid-parentheses

class Solution():
    def longestValidParentheses(self,s):
        if not s or len(s) == 1 : 
            return 0
        n = len(s)
        dp = [0 for i in range(n+1)]
        maxi = 0
        max_ind = 2 
        for i in range(n):
            cur = s[i]
            prev = 0 
            back = cur == ')'
            
            if back : 
                max_ind -= 1 
            else : 
                max_ind += 1 
            max_ind = max(max_ind,3)
            for j in range(max(min(i+2,n-i,max_ind),2)):
                if j == 0 : 
                    prev = dp[j]
                    dp[j] = (dp[j+1]+1)*(dp[j+1]>0) if back else 0 
                    if dp[j] > maxi : 
                        maxi = dp[j]
                else : 
                    temp = dp[j]
                    if j == max_ind-1: 
                        dp[j+1] = 0
                    dp[j] = (dp[j+1] + 1)*(dp[j+1]>0 ) if back  else (prev + 1)*(prev > 0 or j == 1)
                    prev = temp
        return maxi