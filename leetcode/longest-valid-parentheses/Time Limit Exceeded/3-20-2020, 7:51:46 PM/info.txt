{"id":314159937,"lang":"python3","time":"1 year, 4 months","timestamp":1584701506,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/314159937/","is_pending":"Not Pending","title":"Longest Valid Parentheses","memory":"N/A","code":"class Solution():\n    def longestValidParentheses(self,s):\n        if not s or len(s) == 1 : \n            return 0\n        n = len(s)\n        dp = [0 for i in range(n+1)]\n        maxi = 0\n        max_ind = 2 \n        for i in range(n):\n            cur = s[i]\n            prev = 0 \n            back = cur == ')'\n            \n            if back : \n                max_ind -= 1 \n            else : \n                max_ind += 1 \n            max_ind = max(max_ind,3)\n            for j in range(max(min(i+2,n-i,max_ind),2)):\n                if j == 0 : \n                    prev = dp[j]\n                    dp[j] = (dp[j+1]+1)*(dp[j+1]>0) if back else 0 \n                    if dp[j] > maxi : \n                        maxi = dp[j]\n                else : \n                    temp = dp[j]\n                    if j == max_ind-1: \n                        dp[j+1] = 0\n                    dp[j] = (dp[j+1] + 1)*(dp[j+1]>0 ) if back  else (prev + 1)*(prev > 0 or j == 1)\n                    prev = temp\n        return maxi","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100","title_slug":"longest-valid-parentheses"}