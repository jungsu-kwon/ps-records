{"id":448651003,"lang":"python3","time":"6 months, 1 week","timestamp":1611780700,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/448651003/","is_pending":"Not Pending","title":"Largest BST Subtree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def helper(self,root):\n        '''\n        returns isBST,treeSize,minVal,maxVal\n        '''\n        isBST,treeSize,minVal,maxVal = True,1,root.val,root.val\n        if root.left:\n            isLeftBST,leftSize,minLeft,maxLeft = self.helper(root.left)\n            if not isLeftBST or maxLeft >= root.val :\n                return False,False,None,None\n            treeSize += leftSize\n            minVal = minLeft\n\n        if root.right:\n            isRightBST, rightSize, minRight, maxRight = self.helper(root.right)\n            if not isRightBST or minRight <= root.val:\n                return False,False,None,None\n            treeSize += rightSize\n            maxVal = maxRight\n\n\n        self.treeSize =  max(self.treeSize,treeSize)\n\n        return True,treeSize,minVal,maxVal\n\n            \n\n    def largestBSTSubtree(self, root: TreeNode) -> int:\n        self.treeSize = 0\n        if not root:\n            return 0 \n        self.helper(root)\n        return self.treeSize\n        \n\n        \n        ","compare_result":"1111111111111111111111111111111011111111110111111111111111111111111101111","title_slug":"largest-bst-subtree"}