{"id":442177398,"lang":"python3","time":"6 months, 3 weeks","timestamp":1610486568,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/442177398/","is_pending":"Not Pending","title":"Palindrome Permutation II","memory":"N/A","code":"from collections import Counter\nfrom itertools import permutations\n\nclass Solution:\n    def getMirrorStr(self,perm,oddChar):\n        addOddChar = oddChar != ''\n        firstHalf = list(perm)\n        secondHalf = list(perm)[::-1]\n        \n        if addOddChar :\n            return ''.join(firstHalf + [oddChar] + secondHalf)\n        return ''.join(firstHalf+secondHalf)\n\n\n    def generatePalindromes(self, s: str) -> List[str]:\n        counter,oddCount = Counter(),0\n        for char in s:\n            counter[char] += 1\n\n        ans = []\n        oddChar = ''\n        for char,count in counter.items():\n            isOdd = count % 2\n            if not isOdd:\n                continue\n            oddCount += 1\n            oddChar = char\n            if oddCount != 1:\n                return ans\n        if oddCount :\n            counter[oddChar] -= 1\n        toPerm = []\n        for char,count in counter.items():\n            toPerm += [char for i in range(count//2)]\n        return set([self.getMirrorStr(perm,oddChar) for perm in permutations(toPerm)])\n        \n\n            \n\n\n           \n","compare_result":"11111111111111111111111111100","title_slug":"palindrome-permutation-ii"}