// https://leetcode.com/problems/palindrome-permutation-ii

from collections import Counter
from itertools import permutations

class Solution:
    def getMirrorStr(self,perm,oddChar):
        addOddChar = oddChar != ''
        firstHalf = list(perm)
        secondHalf = list(perm)[::-1]
        
        if addOddChar :
            return ''.join(firstHalf + [oddChar] + secondHalf)
        return ''.join(firstHalf+secondHalf)


    def generatePalindromes(self, s: str) -> List[str]:
        counter,oddCount = Counter(),0
        for char in s:
            counter[char] += 1

        ans = []
        oddChar = ''
        for char,count in counter.items():
            isOdd = count % 2
            if not isOdd:
                continue
            oddCount += 1
            oddChar = char
            if oddCount != 1:
                return ans
        if oddCount :
            counter[oddChar] -= 1
        toPerm = []
        for char,count in counter.items():
            toPerm += [char for i in range(count//2)]
        return set([self.getMirrorStr(perm,oddChar) for perm in permutations(toPerm)])
        

            


           
