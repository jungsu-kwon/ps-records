{"id":442186738,"lang":"python3","time":"6 months, 3 weeks","timestamp":1610488387,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/442186738/","is_pending":"Not Pending","title":"Palindrome Permutation II","memory":"14.6 MB","code":"from collections import Counter\nfrom itertools import permutations\n\nclass Solution:\n    def getMirrorStr(self,perm,oddChar):\n        addOddChar = oddChar != ''\n        firstHalf = list(perm)\n        secondHalf = list(perm)[::-1]\n        if addOddChar :\n            return ''.join(firstHalf + [oddChar] + secondHalf)\n        return ''.join(firstHalf+secondHalf)\n    \n    def getPermutations(self,counter,prefix):\n        if len(counter) == 0 :\n            return [prefix]\n        permsList = []\n        for char,count in counter.items():\n            if count == 0 :\n                continue\n            counter[char] -= 2\n\n            permsList += self.getPermutations(counter,prefix+char)\n            counter[char] = count\n            \n        if not permsList:\n            permsList.append(prefix)\n        \n        return permsList\n\n\n    def generatePalindromes(self, s: str) -> List[str]:\n        counter,oddCount = Counter(),0\n        for char in s:\n            counter[char] += 1\n\n        ans = []\n        oddChar = ''\n        for char,count in counter.items():\n            isOdd = count % 2\n            if not isOdd:\n                continue\n            oddCount += 1\n            oddChar = char\n            if oddCount != 1:\n                return ans\n        if oddChar != '':\n            counter[oddChar] -= 1\n\n        return [self.getMirrorStr(perm,oddChar) for perm in self.getPermutations(counter,'')]\n        \n\n            \n\n\n           \n","compare_result":"11111111111111111111111111111","title_slug":"palindrome-permutation-ii"}