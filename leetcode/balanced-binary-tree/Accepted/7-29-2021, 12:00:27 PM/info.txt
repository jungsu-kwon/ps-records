{"id":529928797,"lang":"python3","time":"5 days, 5 hours","timestamp":1627527627,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/529928797/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"18 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def helper(self, root: TreeNode) -> int:\n        \"\"\"\n        calculate depth of tree root\n\n        returns -1 if tree is not balanced\n        o.w returns normal height\n        \"\"\"\n\n        if not root: return 0\n\n        if (leftHeight := self.helper(root.left)) == -1:\n            return -1\n        elif (rightHeight := self.helper(root.right)) == -1:\n            return -1\n        elif abs(rightHeight - leftHeight) > 1:\n            return -1\n        return max(rightHeight,leftHeight) + 1\n\n    def isBalanced(self, root: TreeNode) -> bool:\n        return self.helper(root) != -1","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree"}