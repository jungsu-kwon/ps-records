// https://leetcode.com/problems/substring-with-concatenation-of-all-words

class Solution:
    def findSubstring(self, s, words):
        from collections import Counter
        num_words = len(words)
        len_str = len(s)
        len_word = len(words[0])
        # basic validity check or corner cases
        if num_words == 0 or len_str == 0 or len_word == 0 : 
            return []
        counter = Counter()
        
        
        for i,word in enumerate(words) : 
            counter[word] += 1 
        num_words_unique = len(counter)

        counter_note = Counter()
        count = 0 
        ans = [] 
        for start in range(len_word):
            counter_note = Counter()
            count = 0 
            prev = ""
            for i in range(start,len_str,len_word):
                prev_start = i - (num_words)*len_word
                if prev_start >= 0 :  
                    prev = s[prev_start:prev_start+len_word]
                    if prev in counter : 
                        if counter[prev] == counter_note[prev] : 
                            count -= 1 
                        elif counter[prev] == counter_note[prev] + 1  : 
                            count -= 1 
                        counter_note[prev] -= 1 
                end = i + len_word
                cur = s[i:end]
                if cur in counter : 
                    counter_note[cur] += 1 
                    if counter_note[cur] == counter[cur] : 
                        count += 1 
                if count == num_words_unique : 
                    ans.append(i-(num_words-1)*len_word)
        return ans

