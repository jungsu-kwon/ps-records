{"id":518113934,"lang":"python3","time":"4Â weeks","timestamp":1625553045,"status_display":"Accepted","runtime":"180 ms","url":"/submissions/detail/518113934/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"14.5 MB","code":"from typing import List\n\nclass Solution:\n    def get_cell_index(self,i,j):\n        return ((i//3) - 1) * 3 + j//3\n\n    def get_available_numbers(self,ind):\n        i,j = ind // self.n, ind % self.n\n        cell_set = self.cells[self.get_cell_index(i,j)]\n        col_set  = self.cols[j]\n        row_set  = self.rows[i]\n\n        return [i for i in range(1,10) if (i in cell_set) and \n                                          (i in row_set ) and \n                                          (i in col_set ) ]\n\n\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        :rtype None\n        \"\"\"\n\n        self.n = 9\n        self.cols = [set([i for i in range(1,10)]) for i in range(self.n)]\n        self.rows    = [set([i for i in range(1,10)]) for i in range(self.n)]\n        self.cells   = [set([i for i in range(1,10)]) for i in range(self.n)]\n        self.board = board\n\n        for i in range(self.n):\n            for j in range(self.n):\n                if board[i][j] == '.':\n                    continue\n                else:\n                    cell_ind = self.get_cell_index(i,j)\n                    num = int(board[i][j])\n\n                    self.cols[j].remove(num)\n                    self.rows[i].remove(num)\n                    self.cells[cell_ind].remove(num)\n        \n        def helper(ind=0) -> bool:\n            if ind == self.n * self.n:\n                return True\n            i,j = ind // self.n, ind % self.n\n            if self.board[i][j] != '.':\n                return helper(ind+1)\n\n            cell_ind = self.get_cell_index(i,j)\n\n\n            available_nums = self.get_available_numbers(ind)\n\n            if not available_nums:\n                return False\n\n            for num in available_nums:\n                self.cols[j].remove(num)\n                self.rows[i].remove(num)\n                self.cells[cell_ind].remove(num)\n                self.board[i][j] = str(num)\n\n                if helper(ind + 1):\n                    return True\n                \n                self.board[i][j] = '.'\n                self.cols[j].add(num)\n                self.rows[i].add(num)\n                self.cells[cell_ind].add(num)\n\n        helper(ind=0)\n\n\n        \n        \n\n\n        \n                \n\n        \n\n\n\n\n\n        \n\n        \n\n\n\n\n\n\n\n\n\n\n","compare_result":"111111","title_slug":"sudoku-solver"}