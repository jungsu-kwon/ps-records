{"id":389634427,"lang":"cpp","time":"11Â months","timestamp":1598999120,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/389634427/","is_pending":"Not Pending","title":"Merge Two Binary Trees","memory":"32.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if (t1 == nullptr && t2 == nullptr)\n            return nullptr;\n        else if (t1 == nullptr || t2 == nullptr){\n            // non nullptr node\n            TreeNode* t3 = (t1 == nullptr) ? t2 : t1;\n            TreeNode *root = new TreeNode(t3->val);\n            root->left = mergeTrees(t3->left,nullptr);\n            root->right = mergeTrees(t3->right,nullptr);\n            return root;\n        }\n        else{\n            // no nullptr in t1 and t2\n            TreeNode *root = new TreeNode(t1->val + t2->val);\n            root->left = mergeTrees(t1->left,t2->left);\n            root->right = mergeTrees(t1->right,t2->right);\n            return root;\n        }\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-binary-trees"}