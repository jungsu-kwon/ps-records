{"id":401192706,"lang":"cpp","time":"10 months, 1 week","timestamp":1601174350,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/401192706/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"14.5 MB","code":"#include <vector>\n#include <iostream>\n\nusing namespace std;\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n\t\tauto n  = height.size();\n\t\tif (n == 0) return 0;\n\n\t\tstd::vector<int> vecMaxLeft(n,0);\n\t\tstd::vector<int> vecMaxRight(n,0);\n\n\t\tauto leftMax = -1;\n\t\tauto rightMax = -1;\n\t\tfor (auto t = 0 ; t < n; ++t){\n\t\t\tauto leftVal = height[t];\n\t\t\tauto rightVal = height[n-1-t];\n\n\t\t\tleftMax = std::max(leftVal,leftMax);\n\t\t\trightMax = std::max(rightVal,rightMax);\n\n\t\t\tvecMaxLeft[t] = leftMax;\n\t\t\tvecMaxRight[n-1-t] = rightMax;\n\t\t}\n\n\t\tint sum = 0;\n\t\tfor (auto t = 0 ; t < n; ++t){\n\t\t\tauto leftMax = vecMaxLeft[t];\n\t\t\tauto rightMax = vecMaxRight[t];\n\t\t\tauto nTrapHeight = std::min(leftMax,rightMax);\n\t\t\tif (nTrapHeight == 0)\n\t\t\t\tcontinue;\n\n\n\t\t\tauto ind = t;\n\t\t\twhile (ind < n && height[ind] < nTrapHeight){\n\t\t\t\tsum += nTrapHeight - height[ind];\n\n\t\t\t\tind += 1;\n\t\t\t}\n\n\t\t\tt = ind ;\n\t\t}\n\t\treturn sum;\n\n\n        \n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trapping-rain-water"}