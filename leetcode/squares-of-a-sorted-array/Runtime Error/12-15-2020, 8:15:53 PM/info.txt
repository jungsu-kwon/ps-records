{"id":430892770,"lang":"python3","time":"7Â months, 2Â weeks","timestamp":1608030953,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/430892770/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"N/A","code":"class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        need_to_merge = nums[0] < 0 \n        first_non_neg = None\n        for i,num in enumerate(nums):\n            if need_to_merge and not first_non_neg and num >= 0   : \n                first_non_neg = i\n\n            nums[i] = num * num\n\n        if not need_to_merge : \n            return nums\n\n        ans = [0 for i in range(len(nums))]\n        l,r = first_non_neg-1,first_non_neg\n\n        index = 0\n        while l >=0 and r < len(nums):\n            if nums[l] > nums[r] : \n                ans[index] = nums[r]\n                r += 1 \n            else : \n                ans[index] = nums[l]\n                l -= 1\n            index += 1 \n\n        if l == -1 : \n            for enum_index,ans_index in enumerate(range(index,len(nums))):\n                ans[ans_index] = nums[r+enum_index]\n        else :\n            for enum_index,ans_index in enumerate(range(index,len(nums))):\n                ans[ans_index] = nums[l-enum_index]\n        return ans\n\n\n\n\n\n        ","compare_result":"11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"squares-of-a-sorted-array"}