{"id":529541877,"lang":"python3","time":"6Â days","timestamp":1627460244,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/529541877/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"20.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n    def __init__(self, root: TreeNode):\n        self.nodes = []\n        self.index = -1\n        self._inOrder(root)\n            \n        \n    def _inOrder(self,root: TreeNode) -> None:\n        if not root:\n            return \n        self._inOrder(root.left)\n        self.nodes.append(root.val)\n        self._inOrder(root.right)\n\n\n    def next(self) -> int:\n        self.index += 1\n\n        return self.nodes[self.index]\n\n        \n\n    def hasNext(self) -> bool:\n        return self.index + 1 < len(self.nodes)\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}