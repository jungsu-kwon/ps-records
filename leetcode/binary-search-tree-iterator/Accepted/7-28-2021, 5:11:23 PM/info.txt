{"id":529539845,"lang":"python3","time":"6Â days","timestamp":1627459883,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/529539845/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"20.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass BSTIterator:\n\n    def __init__(self, root: TreeNode):\n\n        # Array containing all the nodes in the sorted order\n        self.nodes_sorted = []\n\n        # Pointer to the next smallest element in the BST\n        self.index = -1\n\n        # Call to flatten the input binary search tree\n        self._inorder(root)\n\n    def _inorder(self, root):\n        if not root:\n            return\n        self._inorder(root.left)\n        self.nodes_sorted.append(root.val)\n        self._inorder(root.right)\n\n    def next(self) -> int:\n        \"\"\"\n        @return the next smallest number\n        \"\"\"\n        self.index += 1\n        return self.nodes_sorted[self.index]\n\n    def hasNext(self) -> bool:\n        \"\"\"\n        @return whether we have a next smallest number\n        \"\"\"\n        return self.index + 1 < len(self.nodes_sorted)","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}