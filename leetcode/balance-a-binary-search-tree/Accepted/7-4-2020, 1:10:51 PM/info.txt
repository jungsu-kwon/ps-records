{"id":361822523,"lang":"python3","time":"1 year, 1 month","timestamp":1593835851,"status_display":"Accepted","runtime":"364 ms","url":"/submissions/detail/361822523/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"19.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inOrderTraversal(self,root):\n        if not root : \n            return\n        self.inOrderTraversal(root.left)\n        self.vals.append(root.val)\n        self.inOrderTraversal(root.right)\n        \n    def BalancedTree(self,start,end):\n        if end < start : \n            return None \n        elif start == end : \n            return TreeNode(self.vals[start])\n        mid = (end + start) // 2 \n        root = TreeNode(self.vals[mid])\n        root.left = self.BalancedTree(start, mid -1)\n        root.right = self.BalancedTree(mid+1,end)\n        return root \n        \n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        self.vals = []\n        self.inOrderTraversal(root)\n        root = self.BalancedTree(0,len(self.vals)-1)\n        return root \n        \n    \n        \n        \n        \n        ","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree"}