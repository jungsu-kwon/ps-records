// https://leetcode.com/problems/balance-a-binary-search-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inOrderTraversal(self,root):
        if not root : 
            return
        self.inOrderTraversal(root.left)
        self.vals.append(root.val)
        self.inOrderTraversal(root.right)
        
    def BalancedTree(self,start,end):
        if end < start : 
            return None 
        elif start == end : 
            return TreeNode(self.vals[start])
        mid = (end + start) // 2 
        root = TreeNode(self.vals[mid])
        root.left = self.BalancedTree(start, mid -1)
        root.right = self.BalancedTree(mid+1,end)
        return root 
        
    def balanceBST(self, root: TreeNode) -> TreeNode:
        self.vals = []
        self.inOrderTraversal(root)
        root = self.BalancedTree(0,len(self.vals)-1)
        return root 
        
    
        
        
        
        