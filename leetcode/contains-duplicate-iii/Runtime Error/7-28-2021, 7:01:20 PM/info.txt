{"id":529572826,"lang":"python3","time":"5 days, 22 hours","timestamp":1627466480,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/529572826/","is_pending":"Not Pending","title":"Contains Duplicate III","memory":"N/A","code":"class Solution:\n    def containsNearbyAlmostDuplicate(self, nums, k, t):\n        # Bucket sort. Each bucket has size of t. For each number, the possible\n        # candidate can only be in the same bucket or the two buckets besides.\n        # Keep as many as k buckets to ensure that the difference is at most k.\n        buckets = {}\n        for i, v in enumerate(nums):\n            # t == 0 is a special case where we only have to check the bucket\n            # that v is in.\n            bucketNum, offset = (v / t, 1) if t else (v, 0)\n            for idx in xrange(bucketNum - offset, bucketNum + offset + 1):\n                if idx in buckets and abs(buckets[idx] - nums[i]) <= t:\n                    return True\n\n            buckets[bucketNum] = nums[i]\n            if len(buckets) > k:\n                # Remove the bucket which is too far away. Beware of zero t.\n                del buckets[nums[i - k] / t if t else nums[i - k]]\n\n        return False","compare_result":"000000000000000000000000000000000000000000000000000000","title_slug":"contains-duplicate-iii"}