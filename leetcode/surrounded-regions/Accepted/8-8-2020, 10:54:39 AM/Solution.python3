// https://leetcode.com/problems/surrounded-regions

class Solution:
    def out(self,node):
        x,y = node
        if x == -1 or x == self.h or y == -1 or y== self.w : 
            return True
        return False

    def edge(self,node):
        x,y = node
        if x == 0 or x == (self.h-1) or y == 0 or y == (self.w -1): 
            return True
        return False

    def valid_children(self,node):
        (ni,nj),children= node,[]

        for x,y in [(ni+1,nj),(ni-1,nj),(ni,nj+1),(ni,nj-1)]:
            if self.out((x,y)) or self.board[x][y] == 'X' or (x,y) in self.visited  : 
                continue
            children.append((x,y))
        
        return children




    def solve(self, board):
        if not board:
            return 
        self.visited = set([])
        self.queue,self.flip = set([]),set([])
        self.h,self.w,self.board = len(board),len(board[0]),board
        self.to_flip = [] 



        for i in range(self.h):
            for j in range(self.w):
                if (i,j) in self.visited : 
                    continue 
                elif self.board[i][j] == 'X' : 
                    self.visited.add((i,j))
                    continue

                self.queue,self.to_flip,flip  =  [(i,j)],[(i,j)],True

                while self.queue : 
                    n =len(self.queue)  
                    for k in range(n):
                        node = self.queue.pop(0)
                        if node in self.visited : 
                            continue
                        valid_children = self.valid_children(node)
                        self.queue.extend(valid_children)
                        if flip : 
                            for node_ in [node] + valid_children : 
                                if self.edge(node_):
                                    flip = False
                            self.to_flip.extend(valid_children)

                        self.visited.add(node)


                if flip : 
                    for x,y in self.to_flip : 
                        board[x][y] = 'X'

