{"id":377668065,"lang":"python3","time":"12Â months","timestamp":1596851679,"status_display":"Accepted","runtime":"324 ms","url":"/submissions/detail/377668065/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"22.1 MB","code":"class Solution:\n    def out(self,node):\n        x,y = node\n        if x == -1 or x == self.h or y == -1 or y== self.w : \n            return True\n        return False\n\n    def edge(self,node):\n        x,y = node\n        if x == 0 or x == (self.h-1) or y == 0 or y == (self.w -1): \n            return True\n        return False\n\n    def valid_children(self,node):\n        (ni,nj),children= node,[]\n\n        for x,y in [(ni+1,nj),(ni-1,nj),(ni,nj+1),(ni,nj-1)]:\n            if self.out((x,y)) or self.board[x][y] == 'X' or (x,y) in self.visited  : \n                continue\n            children.append((x,y))\n        \n        return children\n\n\n\n\n    def solve(self, board):\n        if not board:\n            return \n        self.visited = set([])\n        self.queue,self.flip = set([]),set([])\n        self.h,self.w,self.board = len(board),len(board[0]),board\n        self.to_flip = [] \n\n\n\n        for i in range(self.h):\n            for j in range(self.w):\n                if (i,j) in self.visited : \n                    continue \n                elif self.board[i][j] == 'X' : \n                    self.visited.add((i,j))\n                    continue\n\n                self.queue,self.to_flip,flip  =  [(i,j)],[(i,j)],True\n\n                while self.queue : \n                    n =len(self.queue)  \n                    for k in range(n):\n                        node = self.queue.pop(0)\n                        if node in self.visited : \n                            continue\n                        valid_children = self.valid_children(node)\n                        self.queue.extend(valid_children)\n                        if flip : \n                            for node_ in [node] + valid_children : \n                                if self.edge(node_):\n                                    flip = False\n                            self.to_flip.extend(valid_children)\n\n                        self.visited.add(node)\n\n\n                if flip : \n                    for x,y in self.to_flip : \n                        board[x][y] = 'X'\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}