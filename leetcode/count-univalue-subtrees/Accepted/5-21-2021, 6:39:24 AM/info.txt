{"id":495961431,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1621546764,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/495961431/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"16.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n\n    bool is_uniform(TreeNode* root)\n    {\n        auto left = root -> left;\n        if (left && root -> val != left -> val)\n            return false;\n        \n        auto right = root -> right;\n        if (right && root -> val != right -> val)\n            return false;\n        return true;\n    }\n    bool helper(TreeNode* root, int& count)\n    {\n        if (!root) return true;\n\n        auto left_count = 0, right_count = 0;\n\n        auto left_uniform  = helper(root -> left , left_count);\n        auto right_uniform = helper(root -> right, right_count);\n        \n        if (left_uniform && right_uniform && is_uniform(root))\n        {\n            count =  left_count + right_count + 1;\n            return true;\n        }\n        count = left_count + right_count;\n        return false;\n\n\n    }\npublic:\n    int countUnivalSubtrees(TreeNode* root) {\n        int count = 0;\n        helper(root,count);\n        return count;\n                \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-univalue-subtrees"}