{"id":432131910,"lang":"python3","time":"7 months, 2 weeks","timestamp":1608341835,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/432131910/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"14.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def helper(self,root):\n        '''\n        return if tree root is unival in bool \n        and number of subtrees under root\n        '''\n        if not root : \n            return True,0\n        isLeftUnival,numUniLeft = self.helper(root.left)\n        isRightUnival,numUniRight = self.helper(root.right)\n\n        isUnival = isLeftUnival and isRightUnival\n        if isUnival : \n            if root.right and root.right.val != root.val : \n                isUnival = False\n            \n            elif root.left and root.left.val != root.val : \n                isUnival = False\n\n        numUnival = numUniLeft + numUniRight\n        if isUnival : \n            numUnival += 1 \n        return isUnival,numUnival\n\n\n\n    def countUnivalSubtrees(self, root: TreeNode) -> int:\n        return self.helper(root)[1]\n\n\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-univalue-subtrees"}