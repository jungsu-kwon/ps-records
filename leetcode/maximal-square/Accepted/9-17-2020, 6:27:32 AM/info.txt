{"id":396738816,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1600291652,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/396738816/","is_pending":"Not Pending","title":"Maximal Square","memory":"11.2 MB","code":"#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n\tint maximalSquare(vector<vector<char>>& matrix) {\n\t\tauto numRows = matrix.size();\n\t\tif (numRows == 0) return 0; \n\t\tauto numCols = matrix[0].size();\n\n\t\tstd::vector<int> dp(numCols,0);\n\t\tint maxLen = 0;\n\t\t\n\t\tfor (auto t = 0; t < numRows; ++t){\n\t\t\tif (t == 0){\n\t\t\t\tfor (auto i = 0; i < numCols; ++i){\n\t\t\t\t\tdp[i] = matrix[0][i]-'0';\n\t\t\t\t\tmaxLen = std::max(maxLen,dp[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tauto prev = dp[0];\n\t\t\t\tdp[0] = matrix[t][0]-'0';\n                maxLen = std::max(maxLen,dp[0]);\n\t\t\t\tfor(auto i = 1; i < numCols; ++i){\n\t\t\t\t\tauto temp = dp[i];\n\t\t\t\t\tdp[i] = (std::min(std::min(prev,dp[i-1]),dp[i])+1) * (matrix[t][i]-'0');\n\t\t\t\t\tprev = temp;\n\t\t\t\t\tmaxLen =std::max(maxLen,dp[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn  maxLen * maxLen;\n\n\t}\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square"}