{"id":393636984,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1599720893,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/393636984/","is_pending":"Not Pending","title":"Merge Intervals","memory":"14.9 MB","code":"class Solution {\npublic:\n\tbool overlap(std::vector<int> &interval1, std::vector<int> &interval2){\n\t\tif (interval2[0] < interval1[0]) return interval2[1] >= interval1[0];\n\t\telse return interval1[1] >= interval2[0];\n    }\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n\t\tstd::vector<std::vector<int>> vecMerged;\n\t\tif (intervals.size() == 0 ) return vecMerged;\n\n\t\tstd::sort(intervals.begin(),intervals.end(),\n\t\t\t\t[](const std::vector<int> &v1, std::vector<int> &v2){return v1[0] < v2[0];});\n\n\t\tvecMerged.push_back(intervals[0]);\n\t\tfor (auto t = 0 ; t < intervals.size(); ++t){\n\t\t\tauto lastElem = vecMerged.back();\n\t\t\tif (overlap(lastElem,intervals[t]))\n\t\t\t\tvecMerged.back()[1] = std::max(intervals[t][1],vecMerged.back()[1]);\n\t\t\telse \n\t\t\t\tvecMerged.push_back(intervals[t]);\n\t\t}\n\t\t\n\t\treturn vecMerged;\n        \n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals"}