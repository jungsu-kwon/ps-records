{"id":393636697,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1599720843,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/393636697/","is_pending":"Not Pending","title":"Merge Intervals","memory":"N/A","code":"class Solution {\npublic:\n\tbool overlap(std::vector<int> &interval1, std::vector<int> &interval2){\n\t\tif (interval2[0] < interval1[0]) return interval2[1] >= interval1[0];\n\t\telse return interval1[1] >= interval2[0];\n\t}\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n\t\tstd::vector<std::vector<int>> vecMerged;\n\t\tif (intervals.size() == 0 ) return vecMerged;\n\n\t\tstd::sort(intervals.begin(),intervals.end(),\n\t\t\t\t[](const std::vector<int> &v1, std::vector<int> &v2){return v1[0] < v2[0];});\n\n\t\tvecMerged.push_back(intervals[0]);\n\t\tfor (auto t = 0 ; t < intervals.size(); ++t){\n\t\t\tauto lastElem = vecMerged.back();\n\t\t\tif (overlap(lastElem,intervals[t]))\n\t\t\t\tvecMerged.back()[1] = intervals[t][1];\n\t\t\telse \n\t\t\t\tvecMerged.push_back(intervals[t]);\n\t\t}\n\t\t\n\t\treturn vecMerged;\n        \n    }\n};\n","compare_result":"1111111111100111000001000001100110111101001011000010011111011111010000110010001001011000001011010100000100000100111011100000000001000010000000001000000000000000000000000","title_slug":"merge-intervals"}