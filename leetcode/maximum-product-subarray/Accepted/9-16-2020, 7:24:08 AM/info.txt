{"id":396288798,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1600208648,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/396288798/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"12 MB","code":"\nclass Solution {\npublic:\n\tint maxProduct(vector<int>& nums) {\n\t\tauto n = nums.size();\n\t\tif (n == 0)\n\t\t\treturn 0;\n\t\t// empty vector dp with size 2,n\n\t\t// dp 0 i stores minimum elem\n\t\t// dp 1 i stores maximum elem\n\t\tstd::vector<std::vector<int>> dp;\n\t\tdp.push_back(std::vector<int>(n,0));\n\t\tdp.push_back(std::vector<int>(n,0));\n\t\tdp[0][0]= nums[0];\n\t\tdp[1][0] = nums[0];\n\t\tauto ret = nums[0];\n\n\t\tfor (auto t = 1; t < n ; ++t){\n\t\t\tdp[0][t] = std::min(nums[t],std::min(dp[0][t-1]*nums[t], dp[1][t-1]*nums[t]));\n\t\t\tdp[1][t] = std::max(nums[t],std::max(dp[0][t-1]*nums[t], dp[1][t-1]*nums[t]));\n\t\t\tret = std::max(dp[1][t],ret);\n\t\t}\n\n\t\treturn ret;\n\n\t\t\t\t\n\t}\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-subarray"}