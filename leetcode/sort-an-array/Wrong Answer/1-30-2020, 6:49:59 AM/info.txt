{"id":298533806,"lang":"python3","time":"1 year, 6 months","timestamp":1580334599,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/298533806/","is_pending":"Not Pending","title":"Sort an Array","memory":"N/A","code":"class Solution:\n    def sortArray(self, nums) :\n        self.n = len(nums)        \n        self.nums = nums\n        step = 1 \n        left = 0\n        while step <  self.n -1  : \n            left = 0 \n            while left < self.n -1  : \n                mid = left + step -1\n                right = left + 2*step -1 \n                if right > self.n-1:\n                    right = self.n - 1 \n                if not mid >= self.n: \n                    self.merge(left,mid,right)\n                left += 2*step\n            step *= 2 \n        return self.nums\n\n    def merge(self,l,m,r):\n        n_l = m - l + 1 \n        n_r = r - m \n\n        left = [0] * n_l \n        right = [0] * n_r\n\n        for i in range(n_l) : \n            left[i] = self.nums[l+i] \n        for i in range(n_r) : \n            right[i] = self.nums[m+i+1]\n\n        cur,cur_l,cur_r = l,0,0\n        while cur_l < n_l and cur_r < n_r  :\n            \n            if left[cur_l] < right[cur_r] :\n                self.nums[cur] = left[cur_l]\n                cur_l += 1 \n            else : \n                self.nums[cur] = right[cur_r]\n                cur_r += 1 \n            cur += 1 \n        while cur_l < n_l : \n            self.nums[cur] = left[cur_l]\n            cur_l += 1 \n            cur += 1 \n        while cur_r < n_r : \n            self.nums[cur] = right[cur_r]\n            cur_r += 1 \n            cur += 1 \n\n        \n        ","compare_result":"1110011111","title_slug":"sort-an-array"}