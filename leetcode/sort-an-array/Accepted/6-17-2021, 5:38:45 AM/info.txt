{"id":508939399,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1623875925,"status_display":"Accepted","runtime":"224 ms","url":"/submissions/detail/508939399/","is_pending":"Not Pending","title":"Sort an Array","memory":"96 MB","code":"class Solution {\npublic:\n    // Merges two arrays by sorting \n    void mergeArray(vector<int> &A, int left, int mid, int right) {\n        // Create temp arrays\n        int Lsize = mid - left + 1;\n        int Rsize = right - mid;\n        vector<int> L(Lsize);\n        vector<int> R(Rsize);\n        // Copy unsorted data from A to temp arrays\n        for (int i = 0; i < Lsize; i++) {\n            L[i] = A[left + i];\n        }\n        for (int j = 0; j < Rsize; j++) {\n            R[j] = A[mid + j + 1];\n        }\n        // Merge temp arrays back into A\n        int l = 0; // Left Temp Array\n        int r = 0; // Right Temp Array\n        int k; // Merged Original Array\n        for (k = left; k <= right && l < Lsize && r < Rsize; k++) {\n            if (L[l] <= R[r]) {\n                A[k] = L[l];\n                l++;\n            } else {\n                A[k] = R[r];\n                r++;\n            }\n        }\n        while (k <= r && l < Lsize && r < Rsize) {\n            if (L[l] <= R[r]) {\n                A[k] = L[l];\n                l++;\n            } else {\n                A[k] = R[r];\n                r++;\n            }\n            k++;\n        }\n        // Copy If Left Temp has any remaining elements\n        while (l < Lsize) {\n            A[k] = L[l];\n            l++;\n            k++;\n        }\n        // Copy If Right Temp has any remaining elements\n        while (r < Rsize) {\n            A[k] = R[r];\n            r++;\n            k++;\n        }\n    }\n\n    // Merge sort\n    void mergeSort(vector<int> &A, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) / 2;\n            // Left Sub-Array\n            mergeSort(A, left, mid);\n            // Right Sub-Array\n            mergeSort(A, mid + 1, right);\n            // Merge Sub-Arrays\n            mergeArray(A, left, mid, right);\n        }\n    }\n\n    vector<int> sortArray(vector<int>& nums) {\n        mergeSort(nums, 0, nums.size() - 1);\n        return nums;\n    }\n};","compare_result":"1111111111111","title_slug":"sort-an-array"}