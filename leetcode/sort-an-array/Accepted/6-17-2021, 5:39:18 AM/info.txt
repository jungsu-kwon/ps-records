{"id":508939578,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1623875958,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/508939578/","is_pending":"Not Pending","title":"Sort an Array","memory":"71.4 MB","code":"class Solution {\n   public:\n    vector<int> sortArray(vector<int>& nums) {\n        merge_sort(nums, 0, nums.size());\n        return nums;\n    }\n\n   private:\n    static void merge_sort(vector<int>& nums, size_t l, size_t r) {\n        assert(l <= r);\n\n        const auto n = r - l;\n\n        if (n < 2) {\n            return;\n        }\n\n        const auto mid = l + (r - l) / 2;\n        assert(mid - l < r - l);\n        merge_sort(nums, l, mid);\n        assert(r - mid < r - l);\n        merge_sort(nums, mid, r);\n        merge(nums, l, l + (r - l) / 2, r);\n    }\n\n    static void merge(vector<int>& nums, size_t l, size_t m, size_t r) {\n        assert(l <= m && m <= r);\n\n        vector<int> sorted(r - l);\n        size_t l1 = l;\n        size_t l2 = m;\n        size_t r1 = m;\n        size_t r2 = r;\n        size_t ls = 0;\n        while (l2 != r2) {\n            if (l1 == r1) {\n                copy(sorted.cbegin(), sorted.cbegin() + ls, nums.begin() + l);\n                return;\n            }\n\n            if (nums[l1] < nums[l2]) {\n                sorted[ls++] = nums[l1++];\n            } else {\n                sorted[ls++] = nums[l2++];\n            }\n        }\n        copy(nums.cbegin() + l1, nums.cbegin() + r1, sorted.begin() + ls);\n        copy(sorted.cbegin(), sorted.cend(), nums.begin() + l);\n    }\n};","compare_result":"1111111111111","title_slug":"sort-an-array"}