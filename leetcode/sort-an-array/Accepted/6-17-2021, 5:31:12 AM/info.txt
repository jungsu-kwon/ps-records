{"id":508937178,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1623875472,"status_display":"Accepted","runtime":"208 ms","url":"/submissions/detail/508937178/","is_pending":"Not Pending","title":"Sort an Array","memory":"98.8 MB","code":"#include <vector>\nusing namespace std;\n\nclass Solution {\nprivate:\n    void merge(vector<int> &merged, const vector<int> &left, const vector<int> &right)\n    {\n        int left_ind = 0;\n        int right_ind = 0;\n        int merge_ind = 0;\n\n        while (left_ind != left.size() && right_ind != right.size())\n        {\n            if (left[left_ind] < right[right_ind])\n            {\n                merged[merge_ind] = left[left_ind];\n                left_ind++;\n            }\n            else\n            {\n                merged[merge_ind] = right[right_ind];\n                right_ind++;\n            }\n            merge_ind++;\n        }\n        if (left_ind  == left.size())\n            std::copy(right.begin()+right_ind,right.end(),merged.begin()+merge_ind);\n        else\n            std::copy(left.begin()+left_ind,left.end(),merged.begin()+merge_ind);\n    \n    }\n    vector<int> helper(vector<int> &nums, int start, int end)\n    {\n        // end exclusive [start, end)\n        if (start >= end) return vector<int>{};\n        else if (end - start == 1) return vector<int> {nums[start]};\n        int middle = (start + end) / 2;\n        // cout << start << \" \"<< middle  << \" \" << end << endl;\n\n        auto left = helper(nums,start,middle);\n        auto right = helper(nums,middle,end);\n\n        auto merged = vector<int>(end - start,0);\n        merge(merged,left,right);\n        return merged;\n    }\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        if (nums.size() <= 1) return nums;\n        return helper(nums,0,nums.size());\n\n        \n    }\n};","compare_result":"1111111111111","title_slug":"sort-an-array"}