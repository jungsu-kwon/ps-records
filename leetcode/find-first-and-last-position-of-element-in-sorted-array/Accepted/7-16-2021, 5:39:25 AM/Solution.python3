// https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array

from typing import List

class Solution:
    def searchBound(self,nums: List[int], target: int, findLowerBound: bool = True) -> int:
        left: int = 0
        right: int = len(nums) - 1 

        while (left <= right):
            mid = (left + right) // 2
            if nums[mid] < target:
                left = mid + 1
            elif nums[mid] > target:
                right = mid - 1
            # nums[mid] == target
            elif findLowerBound:
                if mid == 0 or nums[mid] > nums[mid - 1]:
                    return mid
                right = mid - 1
            else:
                if mid == len(nums) - 1 or nums[mid] < nums[mid + 1]:
                    return mid
                left = mid + 1
        return -1





    def searchRange(self, nums: List[int], target: int) -> List[int]:
        lowerBound: int = self.searchBound(nums,target,findLowerBound=True)
        if lowerBound == -1:
            return [-1,-1]
        upperBound: int = self.searchBound(nums,target,findLowerBound=False)
        return [lowerBound,upperBound]

        