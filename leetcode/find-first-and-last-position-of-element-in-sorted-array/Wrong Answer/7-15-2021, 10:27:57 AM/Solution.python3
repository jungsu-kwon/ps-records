// https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array

from typing import List
class Solution:
    def findBound(self,nums: List[int],target: int, lowerBound=True) -> int:
        left: int = 0
        right: int = len(nums) - 1

        while (left <= right):
            mid: int = (left + right) // 2
            if nums[mid] < target:
                left = mid + 1

            elif nums[mid] > target:
                right = mid - 1

            # nums[mid] == target
            elif lowerBound:
                if mid == left or nums[mid - 1] < target:
                    return mid
                right = mid - 1

            # nums[mid] == target
            else:
                if mid == left or nums[mid + 1] > target:
                    return mid
                left = mid + 1

        return -1

    def searchRange(self, nums: List[int], target: int) -> List[int]:
        lowerBound: int = self.findBound(nums,target,True)
        if lowerBound == -1:
            return [-1,-1]
        upperBound: int = self.findBound(nums,target,False)
        return [lowerBound,upperBound]

