{"id":529446890,"lang":"python3","time":"6 days, 4 hours","timestamp":1627446268,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/529446890/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def helper(self,\n        root: TreeNode, \n        mini: int = None,\n        maxi: int = None\n    ) -> bool:\n        if not root: return True\n        if root.left and root.left.val >= root.val: return False\n        if root.right and root.right.val <= root.val: return False\n\n\n        leftMax: int = max(maxi,root.val) if maxi else root.val\n        leftMin: int = mini\n\n        rightMax: int = maxi\n        rightMin: int = min(mini,root.val) if mini else root.val\n\n        return (self.helper(root.left,mini=leftMin,maxi=leftMax) and \n            self.helper(root.right,mini=rightMin,maxi=rightMax))\n\n\n    def isValidBST(self, root: TreeNode) -> bool:\n        return self.helper(root,mini=None,maxi=None)","compare_result":"11111111111001001001111111111111111111111111111111111111111111111111111101111101","title_slug":"validate-binary-search-tree"}