{"id":403003629,"lang":"cpp","time":"10Â months","timestamp":1601533521,"status_display":"Accepted","runtime":"180 ms","url":"/submissions/detail/403003629/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"46.8 MB","code":"#include <queue>\n#include <cmath>\n\nclass MedianFinder {\nprivate :\n\tstd::priority_queue<int> maxQueue;\n\tstd::priority_queue<int,std::vector<int>,std::greater<int>> minQueue;\n\tint getNumElems(){\n\t\treturn maxQueue.size() + minQueue.size();\n\t}\n\npublic:\n    /** initialize your data structure here. */\n    MedianFinder() {\n    }\n    \n    void addNum(int num) {\n\t\tif (!getNumElems()){\n\t\t\tmaxQueue.push(num);\n\t\t}\t\n\t\telse {\n\t\t\tauto curMedian = findMedian();\n\t\t\tif (num < curMedian){\n\t\t\t\tmaxQueue.push(num);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tminQueue.push(num);\n\t\t\t}\n\t\t\tif (maxQueue.size() > minQueue.size() + 1){\n\t\t\t\tauto toPop = maxQueue.top();\n\t\t\t\tmaxQueue.pop();\n\t\t\t\tminQueue.push(toPop);\n\t\t\t}\n\t\t\telse if (minQueue.size() > maxQueue.size() + 1){\n\t\t\t\tauto toPop = minQueue.top();\n\t\t\t\tminQueue.pop();\n\t\t\t\tmaxQueue.push(toPop);\n\t\t\t}\n\n\t\t}\n\n    }\n    \n    double findMedian() {\n\t\tif (getNumElems() % 2 == 0){\n\t\t\treturn double(minQueue.top() + maxQueue.top()) /2;\n\t\t}\n\t\telse if (minQueue.size() > maxQueue.size()){\n\t\t\treturn double(minQueue.top());\n\t\t}\n\t\telse return double(maxQueue.top());\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */\n","compare_result":"111111111111111111","title_slug":"find-median-from-data-stream"}