{"id":531081952,"lang":"python3","time":"2 days, 18 hours","timestamp":1627740174,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/531081952/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"N/A","code":"from typing import List, Dict, Set, Tuple\n\nclass TrieNode:\n    def __init__(self):\n        self.children: Dict[str,TrieNode] = {}\n        self.words: Set[Tuple[str,int]] = set([])\n        self.word: str = None\n        self.ind: int = -1\n\nclass Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        root: TrieNode = TrieNode()\n        ans: Set[List[int]] = set([])\n        hasEmptyString: bool = True\n\n        for i,word in enumerate(words):\n            inverseWord: str = word[::-1]\n            curNode = root\n            for ch in inverseWord:\n                if not ch in curNode.children:\n                    curNode.children[ch] = TrieNode()\n                curNode.words.add((inverseWord,i))\n                curNode = curNode.children[ch]\n\n            curNode.word = word\n            curNode.words.add((inverseWord,i))\n            curNode.ind = i\n\n        def isPalindrome(word):\n            for i,letter in enumerate(word[:(len(word)//2) + 1]):\n                if word[i] != word[-1]:\n                    return False\n            return True\n        \n        for wordInd, word in enumerate(words):\n            curNode: TrieNode = root\n            broke: bool = False\n            for chInd, char in enumerate(word):\n                if curNode.word is not None:\n                    remainder: str = word[chInd:]\n                    if isPalindrome(remainder) and \\\n                         wordInd != curNode.ind:\n                        ans.add((wordInd,curNode.ind))\n                if not char in curNode.children:\n                    broke = True\n                    break\n                curNode = curNode.children[char]\n            # print(word,curNode.words)\n            if broke: continue\n\n            for word2, wordInd2 in curNode.words:\n                if wordInd == wordInd2: continue\n                remainder: str = word2[len(word):]\n                # print(\"remainder \",remainder)\n                if isPalindrome(remainder):\n                    ans.add((wordInd,wordInd2))\n        return ans","compare_result":"111011111000111111010000001100010000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110001111111111","title_slug":"palindrome-pairs"}