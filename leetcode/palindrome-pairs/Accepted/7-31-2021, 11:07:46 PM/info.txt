{"id":531083678,"lang":"python3","time":"2 days, 18 hours","timestamp":1627740466,"status_display":"Accepted","runtime":"2121 ms","url":"/submissions/detail/531083678/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"113.7 MB","code":"class TrieNode:\n    def __init__(self):\n        self.next = collections.defaultdict(TrieNode)\n        self.ending_word = -1\n        self.palindrome_suffixes = []\n\nclass Solution:\n    def palindromePairs(self, words):\n\n        # Create the Trie and add the reverses of all the words.\n        trie = TrieNode()\n        for i, word in enumerate(words):\n            word = word[::-1] # We want to insert the reverse.\n            current_level = trie\n            for j, c in enumerate(word):\n                # Check if remainder of word is a palindrome.\n                if word[j:] == word[j:][::-1]:# Is the word the same as its reverse?\n                    current_level.palindrome_suffixes.append(i)\n                # Move down the trie.\n                current_level = current_level.next[c]\n            current_level.ending_word = i\n\n        # Look up each word in the Trie and find palindrome pairs.\n        solutions = []\n        for i, word in enumerate(words):\n            current_level = trie\n            for j, c in enumerate(word):\n                # Check for case 3.\n                if current_level.ending_word != -1:\n                    if word[j:] == word[j:][::-1]: # Is the word the same as its reverse?\n                        solutions.append([i, current_level.ending_word])\n                if c not in current_level.next:\n                    break\n                current_level = current_level.next[c]\n            else: # Case 1 and 2 only come up if whole word was iterated.\n                # Check for case 1.\n                if current_level.ending_word != -1 and current_level.ending_word != i:\n                    solutions.append([i, current_level.ending_word])\n                # Check for case 2.\n                for j in current_level.palindrome_suffixes:\n                    solutions.append([i, j])\n        return solutions","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs"}