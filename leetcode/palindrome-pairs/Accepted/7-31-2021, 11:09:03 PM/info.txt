{"id":531084115,"lang":"python3","time":"2 days, 18 hours","timestamp":1627740543,"status_display":"Accepted","runtime":"1310 ms","url":"/submissions/detail/531084115/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"71.6 MB","code":"class TrieNode:\n    def __init__(self):\n        self.next = collections.defaultdict(TrieNode)\n        self.ending_word = -1\n        self.palindrome_suffixes = []\n\nclass Solution:\n    def ispalin(self, s):  # check if a string is palin (s is suffix of word in our case)\n        return s == s[::-1]\n\n    def palindromePairs(self, words):\n        result = []\n        root = {}  # use dict instead of a TrieNode class to save space\n        for i, word in enumerate(words):\n            curr = root\n            for idx, ch in enumerate(word):\n                if ch not in curr:\n                    curr[ch] = {}\n                curr = curr[ch]\n                tmp = word[idx+1:]\n                if tmp and self.ispalin(tmp):\n                    # keep the idx of word if the suffix of the word after current position is palin\n                    curr.setdefault(\"ids\", []).append(i)\n            curr[\"isword\"] = i  # keep idx of word when reach the end\n        for j, word in enumerate(words):  # start searching reverse of each word in the Trie\n            w = word[::-1]\n            curr = root\n            fail = False\n            for idx, ch in enumerate(w):\n                if ch not in curr:\n                    fail = True\n                    break\n                curr = curr[ch]\n                # if current node is the end of some word, check whether the suffix of reverse word is palin\n                i = curr.get(\"isword\")\n                if i is not None and i != j and self.ispalin(w[idx+1:]):\n                    result.append([i, j])\n            if not fail and \"ids\" in curr:\n                result.extend([i, j] for i in curr[\"ids\"] if i != j)\n        if \"\" in words:  # check for \"\" case\n            idx = words.index(\"\")\n            result.extend(reduce(lambda x, y: x + y, ([[i, idx], [idx, i]] for i, w in enumerate(words) if w and self.ispalin(w))))\n        return result","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs"}