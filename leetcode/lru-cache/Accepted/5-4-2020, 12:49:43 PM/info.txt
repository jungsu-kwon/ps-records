{"id":334115092,"lang":"python3","time":"1 year, 3 months","timestamp":1588564183,"status_display":"Accepted","runtime":"224 ms","url":"/submissions/detail/334115092/","is_pending":"Not Pending","title":"LRU Cache","memory":"23.3 MB","code":"class Node : \n    def __init__(self,val,key,next_=None,prev=None):\n        self.val = val\n        self.next = next_\n        self.prev = prev \n        self.key = key\n        \nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.head = Node(-1,-1)\n        self.tail = Node(-1,-1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        \n        self.capacity,self.count = capacity,0\n        self.dic = {}\n        \n        #to_print = [] \n        #cur = self.head\n        #while cur != None:\n        #    to_print.append(cur.val)\n        #    cur = cur.next\n        #print(to_print)\n        \n    def get(self, key: int) -> int:\n        #print('get {}'.format(key))\n        if key in self.dic:# and self.dic[key] != None   : \n            node = self.dic[key]\n            val = node.val\n            \n            self.pop(node)\n            self.append(node)\n            \n            return val\n        else : \n            return -1\n    def pop(self,node):\n        prev,next_ = node.prev,node.next\n        prev.next,next_.prev = next_,prev\n        node.next,node.prev = None,None\n        \n    def append(self,node):\n        last = self.tail.prev\n        last.next,self.tail.prev = node,node\n        node.prev,node.next = last,self.tail\n        \n    def put(self, key: int, value: int) -> None:\n        #print('put {}'.format(key))    \n        if key in self.dic and self.dic:\n            node = self.dic[key]\n            node.val = value\n            \n            self.pop(node)\n            self.append(node)\n            \n        elif self.capacity > self.count  :\n            node = Node(value,key)\n            self.append(node)\n            \n            self.dic[key] = node\n            self.count += 1 \n            \n        else : \n            node = Node(value,key)\n            to_pop = self.head.next\n            del self.dic[to_pop.key]\n            \n            self.pop(to_pop)\n            self.append(node)\n            self.dic[key] = node\n            \n        #to_print = [] \n        #cur = self.head\n        #while cur != None:\n        #    to_print.append(cur.val)\n        #    cur = cur.next\n        #print(to_print)\n        \n        \n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"111111111111111111","title_slug":"lru-cache"}