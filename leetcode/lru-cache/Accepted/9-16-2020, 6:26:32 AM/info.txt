{"id":396270618,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1600205192,"status_display":"Accepted","runtime":"248 ms","url":"/submissions/detail/396270618/","is_pending":"Not Pending","title":"LRU Cache","memory":"42.9 MB","code":"class LRUCache {\npublic:\n\n    int size;\n    unordered_map<int, list<int>::iterator> key2node;\n    unordered_map< int, int > key2val;\n    list<int> lst;\n\n    LRUCache(int capacity) {\n        size = capacity;\n    }\n    \n    int get(int key) {\n        if(key2val.find(key) == key2val.end()) return -1;\n        lst.erase(key2node[key]);\n        lst.push_front(key);\n        key2node[key] = lst.begin();\n        return key2val[key];\n    }\n    \n    void put(int key, int value) {\n        if(key2val.find(key) == key2val.end()){\n            if(lst.size() == size){\n                key2val.erase(lst.back());\n                key2node.erase(lst.back());\n                lst.pop_back();\n            }\n        }\n        else{\n            lst.erase(key2node[key]);\n        }\n        lst.push_front(key);\n        key2node[key] = lst.begin();\n        key2val[key] = value;\n    }\n};\n","compare_result":"111111111111111111","title_slug":"lru-cache"}