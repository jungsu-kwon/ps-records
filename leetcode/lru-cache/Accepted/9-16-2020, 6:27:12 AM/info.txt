{"id":396270850,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1600205232,"status_display":"Accepted","runtime":"272 ms","url":"/submissions/detail/396270850/","is_pending":"Not Pending","title":"LRU Cache","memory":"40.1 MB","code":"class LRUCache {\npublic:\n    // key = {value, prekey, postkey}\n    unordered_map<int, vector<int>>  cache;\n    int firstKey;\n    int lastKey;\n    int capacity;\n    LRUCache(int capacity) {\n        this->capacity = capacity;\n    }\n    \n    int get(int key) {\n        int retval = -1;\n        if(cache.find(key) != cache.end()){\n            retval = cache[key][0];\n            \n            // if searching key is the same is firstkey, then do nothing\n            if(key == firstKey) {\n                return retval;\n            } else if(key == lastKey){\n                lastKey = cache[lastKey][2];\n                cache[lastKey][1] = -1;\n            } else {\n                // moving new key to first\n                int currentKeyPre = cache[key][1];\n                int currentKeyPost = cache[key][2];\n                cache[currentKeyPre][2] = currentKeyPost;\n                cache[currentKeyPost][1] = currentKeyPre;    \n            }\n            \n            cache[key] = {retval, firstKey, -1};\n            //moving firstKey one step behind the new first key\n            cache[firstKey][2] = key;\n            firstKey = key;\n            \n        }\n        return retval;\n    }\n    \n    void put(int key, int value) {\n        // initial stage\n        if(cache.size() == 0){\n            cache[key] = {value, -1, -1};\n            firstKey = key;\n            lastKey = key;\n        } \n        else {\n            if(cache.find(key) != cache.end()){\n                cache[key][0] = value;\n                get(key);\n                return;\n            }\n            cache[key] = {value, firstKey, -1};\n            //moving firstKey one step behind the new first key\n            cache[firstKey][2] = key;\n            firstKey = key;\n            \n            // removing last Item\n            if(cache.size() > capacity) {\n                int tempLastKey = cache[lastKey][2];\n                cache.erase(lastKey);\n                lastKey = tempLastKey;\n                cache[lastKey][1]  = -1;\n            }\n        }\n\n    }\n};","compare_result":"111111111111111111","title_slug":"lru-cache"}