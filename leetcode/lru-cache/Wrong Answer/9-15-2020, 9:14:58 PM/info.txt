{"id":396071334,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1600172098,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/396071334/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"\nstruct LinkedList {\n    int val;\n\tint key;\n    LinkedList *next;\n\tLinkedList *prev;\n\n    LinkedList(int k,int x) : key(k), val(x), next(nullptr), prev(nullptr) {}\n};\n\nclass LRUCache {\npublic:\n\tint num_elems = 0 ; \n\tint num_max_elems = 0 ;\n\tstd::unordered_map<int,LinkedList*> hash;\n\tLinkedList* head; \n\tLinkedList* tail;\n\n\tLRUCache(int capacity) {\n\t\tnum_max_elems = capacity;\n\t\thead = new LinkedList(0,0);\n\t\ttail = new LinkedList(0,0);\n\t\thead->next = tail;\n\t\ttail->prev = head;\n\n\t}\n\n\tint get(int key) {\n\t\tauto itFound = hash.find(key);\n\t\tif (itFound != hash.end()){\n\t\t\tauto curNode = hash[key];\n\t\t\tauto prevNode = curNode->prev;\n\t\t\tauto nextNode = curNode->next;\n\n\t\t\tprevNode->next = nextNode;\n\t\t\tnextNode->prev = prevNode;\n\n\t\t\tauto firstNode = head->next;\n\t\t\thead->next = curNode;\n\t\t\tcurNode->prev = head;\n\n\t\t\tcurNode->next = firstNode;\n\t\t\tfirstNode->prev = curNode;\n\t\t\treturn itFound->second->val;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\n\tvoid put(int key, int value) \n\t{\n        \n\n\t\tLinkedList* nodeToPut = nullptr;\n\t\tif (num_elems == num_max_elems){\n\t\t\tauto lastNode = tail->prev;\n\t\t\tauto prevNode = lastNode->prev;\n\t\t\tprevNode->next = tail;\n\t\t\ttail->prev = prevNode;\n\t\t\thash.erase(lastNode->key);\n\n\t\t\tnodeToPut = lastNode;\n\t\t\tnodeToPut->key = key;\n\t\t\tnodeToPut->val = value;\n\t\t}\n\t\telse \n\t\t\tnodeToPut = new LinkedList(key,value);\n\n\t\thash[nodeToPut->key] = nodeToPut;\n\n\t\tauto firstNode = head->next;\n\t\thead->next = nodeToPut;\n\t\tnodeToPut->prev = head;\n\t\t\n\t\tfirstNode->prev = nodeToPut;\n\t\tnodeToPut->next = firstNode;\n        num_elems = std::min(num_max_elems,num_elems+1);\n\t\t\n\t}\n};\n\n/**\n *  * Your LRUCache object will be instantiated and called as such:\n *   * LRUCache* obj = new LRUCache(capacity);\n *    * int param_1 = obj->get(key);\n *     * obj->put(key,value);\n *      */\n","compare_result":"111111110111000000","title_slug":"lru-cache"}