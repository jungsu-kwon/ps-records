// https://leetcode.com/problems/lru-cache

class Node : 
    def __init__(self,val,next_=None,prev=None):
        self.val = val
        self.next = next_
        self.prev = prev 
        
class LRUCache:
    def __init__(self, capacity: int):
        self.head = Node(-1)
        self.tail = Node(-1)
        self.head.next = self.tail
        self.tail.prev = self.head
        
        self.capacity,self.count = capacity,0
        self.dic = {}
        
    def get(self, key: int) -> int:
        if key in self.dic and self.dic[key] != None   : 
            node = self.dic[key]
            val = node.val
            
            self.pop(node)
            self.append(node)
            
            return val
        else : 
            return -1
    def pop(self,node):
        prev,next_ = node.prev,node.next
        prev.next,next_.prev = next_,prev
        node.next,node.prev = None,None
        
    def append(self,node):
        last = self.tail.prev
        last.next,self.tail.prev = node,node
        node.prev,node.next = last,self.tail
        
    def put(self, key: int, value: int) -> None:
        if key in self.dic:
            node = self.dic[key]
            node.val = value
            
            self.pop(node)
            self.append(node)
            
        elif self.capacity > self.count  :
            node = Node(value)
            self.append(node)
            
            self.dic[key] = node
            self.count += 1 
            
        else : 
            node = Node(value)
            to_pop = self.head.next
            self.dic[to_pop.val] = None
            self.pop(self.head.next)
            self.append(node)
            self.dic[key] = node
        
        
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)