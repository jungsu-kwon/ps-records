{"id":493415316,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1621077217,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/493415316/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"14.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\nprivate:\n    int get_length(ListNode* head)\n    {\n        auto cur_node = head;\n        int length = 0;\n        while (cur_node != nullptr)\n        {\n            length++;\n            cur_node = cur_node->next;\n        }\n        return length;\n    }\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        auto len_a = get_length(headA);\n        auto len_b = get_length(headB);\n\n        auto offset_a = max(0,len_a - len_b);\n        auto offset_b = max(0,len_b - len_a);\n\n        auto start_a = headA;\n        auto start_b = headB;\n\n        for (auto i = 0; i < offset_a; ++i)\n            start_a = start_a -> next;\n\n        for (auto i = 0; i < offset_b; ++i)\n            start_b = start_b -> next;\n        \n        while (start_a != nullptr && start_b != nullptr)\n        {\n            if (start_a == start_b)\n                return start_a;\n\n            start_a = start_a -> next;\n            start_b = start_b -> next;\n        }\n        return nullptr;\n\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists"}