{"id":389309613,"lang":"cpp","time":"11Â months","timestamp":1598942441,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/389309613/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"14.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int nLength = 0; \n    ListNode *getTail(ListNode *head){\n        ListNode *curNode = head;\n        ListNode *temp = nullptr;\n        \n        nLength = 0 ;\n        \n        while (curNode != nullptr){\n            temp = curNode;\n            curNode = curNode->next;\n            nLength += 1;\n        }\n        return temp;\n    }\n\n        \n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode *tailA,*tailB,*tempNode;\n        tailA = getTail(headA);\n        int nLengthA = nLength;\n        tailB = getTail(headB);\n        int nLengthB = nLength;\n        \n        if (tailA != tailB)\n            return nullptr;\n        \n        int nStepA = (nLengthA > nLengthB )? nLengthA-nLengthB : 0;\n        int nStepB = (nLengthA > nLengthB )? 0 : nLengthB-nLengthA;\n        for (auto t = 0; t < nStepA; ++t){\n            headA = headA->next;\n        }\n        for (auto t = 0; t < nStepB; ++t){\n            headB = headB->next;\n        }\n        while (headA != headB){\n            headA = headA->next;\n            headB = headB->next;\n        }\n        return headA;\n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists"}