{"id":334248263,"lang":"python3","time":"1 year, 3 months","timestamp":1588587387,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/334248263/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"29 MB","code":"class Solution:\n    def get_end(self,head):\n        cur = head\n        end = cur\n        n = 0 \n        while cur != None : \n            end = cur\n            cur = cur.next\n            n += 1 \n        return end,n\n\n\n    def getIntersectionNode(self,headA,headB): \n        if headA == None or headB == None : \n            return None\n        #determine overlap\n        endA,lenA = self.get_end(headA)\n        endB,lenB = self.get_end(headB)\n\n        if endA != endB  : \n            return None\n        shorter_,longer_ = sorted([(headA,lenA),(headB,lenB)],key=lambda x:x[1])\n        shorter,longer = shorter_[0],longer_[0]\n        diff = longer_[1]-shorter_[1]\n\n        for i in range(diff):\n            longer = longer.next\n        \n        for i in range(shorter_[1]):\n            if shorter == longer : \n                return shorter\n            shorter,longer = shorter.next,longer.next\n        return None\n\n\n\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists"}