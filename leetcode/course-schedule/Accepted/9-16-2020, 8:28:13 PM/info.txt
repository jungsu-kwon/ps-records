{"id":396543339,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1600255693,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/396543339/","is_pending":"Not Pending","title":"Course Schedule","memory":"14.4 MB","code":"#include <vector>\n#include <iostream>\nusing namespace std;\n\nclass Solution {\nprivate : \n\tbool dfs(int classInd, std::vector<int> &visited, std::vector<int> &recurStack, std::vector<std::vector<int>> &graph){\n\t\t// return false if revisit visited nodes\n\t\trecurStack[classInd] = 1;\n\t\tvisited[classInd] = 1;\n\t\t\n\t\tfor (auto neighbor : graph[classInd])\n\t\t{\n\t\t\tif (visited[neighbor] == 0)\n\t\t\t{\n\t\t\t\tif ( !dfs(neighbor,visited,recurStack,graph))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (recurStack[neighbor])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\trecurStack[classInd] = 0;\n\t\treturn true;\n\n\t}\npublic:\n\tbool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n\t\tstd::vector<std::vector<int>> graph(numCourses);\n\t\tfor (auto pre : prerequisites)\n\t\t\tgraph[pre[0]].push_back(pre[1]);\n\n\t\tstd::vector<int> visited(numCourses,0);\n\t\tstd::vector<int> recurStack(numCourses,0);\n\n\t\tfor (auto classInd = 0 ; classInd < numCourses; ++classInd){\n\t\t\tif (visited[classInd] == 0 ){\n\t\t\t\tif (dfs(classInd,visited,recurStack,graph) == false)\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t}\n\n\t\t}\n\t\treturn true;\n\n\n\t\t\t\t\n\t}\n};\n","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"course-schedule"}