{"id":305632884,"lang":"python3","time":"1 year, 5 months","timestamp":1582345494,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/305632884/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"12.9 MB","code":"# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        from collections import deque\n        if root == None :\n            return []\n        \n        queue = deque([root])\n        data = [[root.val]]\n            \n        while queue: \n            level = []\n            n = len(queue)\n            \n            for i in range(n):\n                root = queue.popleft()\n                if root.left != None : \n                    level.append(root.left.val)\n                    queue.append(root.left)\n                if root.right != None :     \n                    level.append(root.right.val)\n                    queue.append(root.right)\n            if len(level) != 0 :\n                data.append(level)\n        return data\n                \n                    \n            ","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}