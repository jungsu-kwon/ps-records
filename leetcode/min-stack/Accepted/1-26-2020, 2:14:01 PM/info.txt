{"id":297473365,"lang":"python3","time":"1 year, 6 months","timestamp":1580015641,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/297473365/","is_pending":"Not Pending","title":"Min Stack","memory":"16.5 MB","code":"class MinStack:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.n = 0 \n        self.stack = [] \n        self.min = [] \n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if self.n == 0 :\n            self.min.append(x)\n        else : \n            prev_min = self.min[-1]\n            self.min.append(min(prev_min,x))\n        self.n += 1 \n        \n\n    def pop(self) -> None:\n        if self.n != 0 :\n            self.min.pop()\n            self.stack.pop()\n            self.n -= 1 \n        \n\n    def top(self) -> int:\n        if self.n == 0 : \n            return -1 \n        else : \n            return self.stack[-1]\n\n    def getMin(self) -> int:\n        if self.n == 0 :\n            return -1 \n        else : \n            return self.min[-1]\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"111111111111111111","title_slug":"min-stack"}