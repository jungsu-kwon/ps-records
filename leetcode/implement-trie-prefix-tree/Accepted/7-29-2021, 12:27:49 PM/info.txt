{"id":529938522,"lang":"cpp","time":"5 days, 5 hours","timestamp":1627529269,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/529938522/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"42.9 MB","code":"using namespace std;\nstruct TrieNode{\n\tstd::unordered_map<char,TrieNode*> hash;\n\tbool finish = false;\n};\nclass Trie {\npublic:\n\t/** Initialize your data structure here. */\n\tTrieNode* root;\n\tTrie() {\n\t\troot = new TrieNode();\n\t}\n\n\t/** Inserts a word into the trie. */\n\tvoid insert(string word) \n    {\n        auto curNode = root;\n        for (auto ch : word)\n        {\n            if (curNode->hash.find(ch) == curNode->hash.end())\n                curNode->hash[ch] = new TrieNode();\t\n\n            curNode = curNode->hash[ch];\n        }\n        curNode->finish = true;\n\t}\n\n\t/** Returns if the word is in the trie. */\n\tbool search(string word) {\n\t\tauto curNode = root;\n\t\tfor (auto ch : word)\n\t\t{\n\t\t\tif (curNode->hash.find(ch) != curNode->hash.end()){\n\t\t\t\tcurNode = curNode->hash[ch];\n\t\t\t}\n\t\t\telse \n\t\t\t\treturn false;\n\t\t}\n\t\treturn curNode->finish;\n\n\t}\n\n\t/** Returns if there is any word in the trie that starts with the given prefix. */\n\tbool startsWith(string prefix) {\n\t\tauto curNode = root;\n\t\tfor (auto ch : prefix)\n\t\t{\n\t\t\tif (curNode->hash.find(ch) != curNode->hash.end()){\n\t\t\t\tcurNode = curNode->hash[ch];\n\t\t\t}\n\t\t\telse \n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\n\t}\n};\n\n","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}