{"id":335720472,"lang":"python3","time":"1 year, 2 months","timestamp":1588850851,"status_display":"Accepted","runtime":"192 ms","url":"/submissions/detail/335720472/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"31 MB","code":"class Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        self.alpha = 'abcdefghijklmnopqrstuvwxyz'\n        #assert len(self.alpha) == 26\n\n        #self.ind = {}\n        #for i,alpha_ in enumerate(self.alpha) : \n        #    self.ind[alpha_] = i\n        \n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        cur = self.root\n        for char in word : \n            if not char in cur.children : \n                cur.children[char] = TrieNode()\n                cur = cur.children[char]\n            else : \n                cur = cur.children[char]\n        cur.last_node = True\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        cur = self.root\n        for char in word : \n            if not char in cur.children : \n                return False\n            else : \n                cur = cur.children[char]\n        if cur.last_node : \n            return True\n        else : \n            return False\n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        cur = self.root\n        for char in prefix : \n            if not char in cur.children : \n                return False\n            else : \n                cur = cur.children[char]\n        return True\n\n        \nclass TrieNode:\n    def __init__(self,char=None):\n        self.last_node = False\n        self.children = {}\n        #self.children = [None for i in range(26)]\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}