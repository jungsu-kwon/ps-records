{"id":529943539,"lang":"python3","time":"5 days, 4 hours","timestamp":1627530085,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/529943539/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"27.8 MB","code":"class Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = dict()\n        \n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        root = self.root\n        \n        for char in word:\n            if char not in root:\n                root[char] = dict()\n            root = root[char]\n        root[\"end\"] = 1\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        root = self.root\n        for char in word:\n            if char not in root:\n                return False\n            root = root[char]\n        return \"end\" in root\n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        root = self.root\n        for char in prefix:\n            if char not in root:\n                return False\n            root = root[char]\n        return True\n        \n","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}