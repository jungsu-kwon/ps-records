// https://leetcode.com/problems/implement-trie-prefix-tree

class TrieNode:
    def __init__(self,finish=False,children={}):
        '''
        basic Trie composing node unit
        '''
        self.finish = False
        self.children = children

class Trie:
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode(finish=False,children={})
        

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        curNode: TrieNode = self.root
        for i,ch in enumerate(word):
            if ch in curNode.children:
                curNode = curNode.children[ch]
            else:
                curNode.children[ch] = TrieNode()
                curNode = curNode.children[ch]
            curNode.finish = (len(word) - 1) == i

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        curNode: TrieNode = self.root
        for i,ch in enumerate(word):
            if ch in curNode.children:
                curNode = curNode.children[ch]
            else:
                return False
        return curNode.finish

        

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        curNode: TrieNode = self.root
        for i,ch in enumerate(prefix):
            if ch in curNode.children:
                curNode = curNode.children[ch]
            else:
                return False
        return True