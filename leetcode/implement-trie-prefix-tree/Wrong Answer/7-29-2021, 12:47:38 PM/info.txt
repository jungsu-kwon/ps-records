{"id":529945810,"lang":"python3","time":"5 days, 4 hours","timestamp":1627530458,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/529945810/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"N/A","code":"class Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = {}\n        \n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        curNode: MyNode = self.root\n        for i,ch in enumerate(word):\n            if not ch in curNode:\n                curNode[ch] = {}\n                curNode['finish'] = False\n            curNode = curNode[ch]\n        curNode['finish'] = True\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        curNode: MyNode = self.root\n        for i,ch in enumerate(word):\n            if ch in curNode:\n                curNode = curNode[ch]\n            else:\n                return False\n        return curNode['finish']\n\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        curNode: MyNode = self.root\n        for i,ch in enumerate(prefix):\n            if ch in curNode:\n                curNode = curNode[ch]\n            else:\n                return False\n        return True","compare_result":"111111111110100","title_slug":"implement-trie-prefix-tree"}