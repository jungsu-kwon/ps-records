{"id":529934856,"lang":"python3","time":"5 days, 5 hours","timestamp":1627528684,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/529934856/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"N/A","code":"class TrieNode:\n    def __init__(self,finish=False,children={}):\n        '''\n        basic Trie composing node unit\n        '''\n        self.finish = False\n        self.children = children\n\nclass Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode(finish=False,children={})\n        \n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        curNode: TrieNode = self.root\n        for i,ch in enumerate(word):\n            if ch in curNode.children:\n                curNode = curNode.children[ch]\n            else:\n                curNode.children[ch] = TrieNode()\n                curNode = curNode.children[ch]\n        curNode.finish = True\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        curNode: TrieNode = self.root\n        for i,ch in enumerate(word):\n            if ch in curNode.children:\n                curNode = curNode.children[ch]\n            else:\n                return False\n        return curNode.finish\n\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        curNode: TrieNode = self.root\n        for i,ch in enumerate(prefix):\n            if ch in curNode.children:\n                curNode = curNode.children[ch]\n            else:\n                return False\n        return True","compare_result":"111111110000000","title_slug":"implement-trie-prefix-tree"}