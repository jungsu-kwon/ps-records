{"id":403083468,"lang":"cpp","time":"10Â months","timestamp":1601553403,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/403083468/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"#include <vector>\n#include <iostream>\n#include <string>\nusing namespace std;\nstruct TrieNode{\n\tstd::vector<TrieNode*> children;\n\tstd::string word = \"\";\n\tTrieNode(){\n\t\tchildren.resize(26,nullptr);\n\t}\n};\nclass Solution {\nprivate : \n\tint numRows = 0;\n\tint numCols = 0;\n\tvoid insertWord(TrieNode* root, std::string &word)\n\t{\n\t\tTrieNode* curNode = root;\n\t\tfor (auto ch : word){\n\t\t\tif (curNode->children[ch-'a'] == nullptr){\n\t\t\t\tcurNode->children[ch-'a'] = new TrieNode();\n\t\t\t\tcurNode = curNode->children[ch-'a'];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcurNode = curNode->children[ch-'a'];\n\t\t\t}\n\t\t}\n\t\tcurNode->word = word;\n\t}\n\tvoid helper(std::vector<std::vector<char>> &board, TrieNode* root, std::vector<std::string> &vecFoundWords,int x,int y){\n\t\tif (!root) return ;\n\t\tstd::vector<int> xOffsets{0,0,1,-1};\n\t\tstd::vector<int> yOffsets{-1,1,0,0};\n\t\tauto letter = board[x][y];\n\t\tboard[y][x] = '-';\n\t\tif (root->word != \"\"){\n\t\t\tvecFoundWords.push_back(root->word);\n\t\t\troot->word = \"\";\n\t\t}\n\n\t\tfor (auto t = 0; t < 4; ++t){\n\t\t\tauto xx = x + xOffsets[t];\n\t\t\tauto yy = y + yOffsets[t];\n\n\t\t\tif (xx < 0 || xx > numCols - 1 || yy < 0 || yy > numRows-1)\n\t\t\t\tcontinue;\n\t\t\tauto ch = board[yy][xx];\n\t\t\tif (ch == '-' || root->children[ch-'a'] == nullptr)\n\t\t\t\tcontinue;\n\t\t\thelper(board,root->children[ch-'a'],vecFoundWords,xx,yy);\n\t\t}\n\t\tboard[y][x]  = letter;\n\t\treturn;\n\n\t}\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n\t\tstd::vector<std::string> vecFoundWords;\n\t\tnumRows = board.size();\n\t\tif (!numRows) return vecFoundWords;\n\t\tnumCols = board[0].size();\n\n\t\tauto root = new TrieNode();\n\t\tfor (auto word : words){\n\t\t\tinsertWord(root,word);\n\t\t}\n\n\n\t\tfor (auto i = 0; i < numRows; ++i){\n\t\t\tfor (auto j = 0; j < numCols; ++j){\n\t\t\t\tauto letter = board[i][j];\n\t\t\t\thelper(board,root->children[letter-'a'],vecFoundWords,i,j);\n\t\t\t}\n\t\t}\n\t\treturn vecFoundWords;\n    }\n};\n","compare_result":"111110000000000000000000000000000000","title_slug":"word-search-ii"}