{"id":530618539,"lang":"python3","time":"3 days, 19 hours","timestamp":1627649790,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/530618539/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"from typing import List, Dict, Set, Tuple\nclass TrieNode:\n    def __init__(self):\n        self.children: Dict[str,TrieNode] = {}\n        self.word: str = \"\"\n\nVISITED = \"#\"\nclass Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        root: TrieNode = TrieNode()\n\n        for word in words:\n            self.insert(root,word)\n        \n        numCols: int = len(board[0])\n        numRows: int = len(board)\n        foundWords: Set[str] = set()\n\n        def backtrack(i: int,j: int, curNode: TrieNode) -> None:\n            if curNode.word:\n                foundWords.add(curNode.word)\n\n            for iDiff,jDiff in [(0,1),(0,-1),(1,0),(-1,0)]:\n                newI: int = i + iDiff \n                newJ: int = j + jDiff\n                if not (0 <= newI < numRows) or\\\n                     not (0 <= newJ < numCols):\n                     continue\n\n                letter: str = board[newI][newJ]\n                if letter == VISITED:\n                    continue\n\n                if not letter in curNode.children:\n                    continue\n                board[newI][newJ] = VISITED\n                backtrack(newI, newJ, curNode.children[letter])\n                board[newI][newJ] = letter\n\n        for i in range(numRows):\n            for j in range(numCols):\n                backtrack(i, j, root)\n\n        return foundWords\n\n    def insert(self,root, word: str) -> None:\n        curNode: TrieNode = root\n        for ch in word:\n            if not ch in curNode.children:\n                curNode.children[ch] = TrieNode()\n            curNode = curNode.children[ch]\n        curNode.word = word","compare_result":"110111111111111111011111111111111111110000","title_slug":"word-search-ii"}