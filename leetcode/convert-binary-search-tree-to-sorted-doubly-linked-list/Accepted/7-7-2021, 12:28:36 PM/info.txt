{"id":518561060,"lang":"python3","time":"3 weeks, 6 days","timestamp":1625628516,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/518561060/","is_pending":"Not Pending","title":"Convert Binary Search Tree to Sorted Doubly Linked List","memory":"15.5 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\"\"\"\n\nclass Solution:\n    def connect(self,left: 'Node',right: 'Node')->None:\n        left_tail = left.left\n        right_tail = right.left\n\n        left_tail.right = right\n        right.left = left_tail\n\n        left.left = right_tail\n        right_tail.right = left\n\n    def treeToDoublyList(self, root: 'Node') -> 'Node':\n        if not root: return None\n\n        def create_node(val:int) -> 'Node':\n            node = Node(val)\n            node.left  = node\n            node.right = node\n\n            return node\n\n        def helper(root:'Node') -> 'Node':\n            if not root: return None\n\n            node = create_node(root.val)\n            left_head  = helper(root.left)\n            right_head = helper(root.right)\n\n            head = left_head if left_head else node\n\n            if left_head: self.connect(head,node)\n            if right_head: self.connect(head,right_head)\n\n            return head\n        \n        return helper(root)","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"convert-binary-search-tree-to-sorted-doubly-linked-list"}