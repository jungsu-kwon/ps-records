{"id":529436196,"lang":"python3","time":"6 days, 4 hours","timestamp":1627444617,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/529436196/","is_pending":"Not Pending","title":"Serialize and Deserialize N-ary Tree","memory":"17.7 MB","code":"from typing import List\n\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\nclass Codec:\n    def serialize(self, root: 'Node') -> str:\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: Node\n        :rtype: str\n        \"\"\"\n        if not root:\n            return \"\"\n\n        ans: str = \"\"\n        bfs: List['Node'] = [[root]]\n\n        while bfs:\n            nextBfs: List['Node'] = []\n\n            for children in bfs:\n                if not children:\n                    ans += \"null,\"\n                    continue\n\n                for child in children:\n                    ans += f\"{child.val},\"\n                    nextBfs.append(child.children)\n                ans += \"null,\"\n\n            ans += \"level,\"\n            bfs = nextBfs\n\n        # strip trailing ,\n        return ans[:-1]\n\t\n    def deserialize(self, data: str) -> 'Node':\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: Node\n        \"\"\"\n        # print(data)\n        if not data:\n            return None\n        \n        levels: List[List[str]] = [[val for val in level.split(',') if val]\n            for level in data.split('level')]\n        \n        root: 'Node' = Node(int(levels[0][0]))\n        prevLevel: List['Node'] = [root]\n\n        for level in levels[1:]:\n            if not level:\n                continue\n                \n            parentInd: int = 0\n            curParent: 'Node' = prevLevel[parentInd]\n            curParent.children = []\n            levelNodes: List['Node'] = []\n            # print(prevLevel)\n\n            for val in level:\n                if val == 'null':\n                    parentInd += 1\n                    \n                    if parentInd < len(prevLevel):\n                        curParent = prevLevel[parentInd]\n                    else:\n                        curParent = None\n                else:\n                    child: 'Node' = Node(int(val),children=[])\n                    curParent.children.append(child)\n                    levelNodes.append(child)\n            prevLevel = levelNodes\n        return root\n                     ","compare_result":"11111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-n-ary-tree"}