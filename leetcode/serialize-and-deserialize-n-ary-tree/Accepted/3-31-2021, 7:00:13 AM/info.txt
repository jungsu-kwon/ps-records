{"id":474443305,"lang":"python3","time":"4Â months","timestamp":1617141613,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/474443305/","is_pending":"Not Pending","title":"Serialize and Deserialize N-ary Tree","memory":"17.7 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Codec:\n    def serialize(self, root: 'Node') -> str:\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: Node\n        :rtype: str\n        \"\"\"\n\n        nodes = [root]\n        ans = ''\n        while nodes:\n            children = []\n            for node in nodes:\n                if node:\n                    if node.children:\n                        children.extend(node.children+[None])\n                    else:\n                        children.append(None)\n                    ans += str(node.val)\n                else:\n                    ans += 'null'\n                ans += ','\n            if children:\n                ans += 'Level,'\n            nodes = children\n\n        return ans\n        \n\t\n\n        \n    def parse_level(self, level_str : str):\n        # print([str_  for str_ in level_str.split('null').split(',') if str_])\n        groups_str = level_str.split('null')\n        groups = [group.strip(',').split(',') for group in groups_str]\n        \n        return [[Node(val=int(child)) for child in group if child] for group in groups ]\n    \n    def deserialize(self, data: str) -> 'Node':\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: Node\n        \"\"\"\n        levels_str = data.split('Level')\n        \n        levels = [self.parse_level(level) for level in levels_str]\n        \n        if not levels or not levels[0][0]:\n            return None\n        head = levels[0][0][0]\n\n        parents = [head]\n        children = levels[1] if len(levels) >= 2 else []\n\n\n\n        children_ind = 1\n\n        while parents and children:\n            next_parent = []\n            # print([parent.val for parent in parents])\n            # print([[node.val for node in child] for child in children])\n            for parent,child in zip(parents,children):\n                if child:\n                    next_parent.extend(child)\n                parent.children = child\n            parents = next_parent\n            children_ind += 1\n            children = [] if children_ind == len(levels) else levels[children_ind]\n        \n        \n        return head\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n\n\n\n","compare_result":"1111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-n-ary-tree"}