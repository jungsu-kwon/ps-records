{"id":473830408,"lang":"python3","time":"4Â months","timestamp":1617017395,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/473830408/","is_pending":"Not Pending","title":"Nested List Weight Sum II","memory":"14.4 MB","code":"class Solution:\n    def __init__(self):\n        self.depth = 0\n        self.sum = 0\n        self.weighted_sum = 0\n\n    def count(self,nested : NestedInteger,depth : int) -> None:\n        if nested.isInteger():\n            self.depth = max(self.depth,depth)\n            self.sum += nested.getInteger()\n            self.weighted_sum -= depth * nested.getInteger()\n\n        else:\n            for child in nested.getList():\n                self.count(child,depth+1)\n\n    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:\n        for nested in nestedList:\n            self.count(nested,1)\n        return ((self.depth + 1) * self.sum) + self.weighted_sum\n\n\n\n\n\n\n","compare_result":"11111111111111111111111111","title_slug":"nested-list-weight-sum-ii"}