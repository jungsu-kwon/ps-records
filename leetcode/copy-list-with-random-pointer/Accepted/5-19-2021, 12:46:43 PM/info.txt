{"id":495159683,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1621396003,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/495159683/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"11.4 MB","code":"#include <unordered_map>\nusing namespace std;\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n    \n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if (!head) return nullptr;\n\n        auto cur_node = head;\n        auto new_head = new Node(0);\n        auto new_node = new_head;\n\n        auto hash = unordered_map<Node*,Node*>();\n\n        while (cur_node)\n        {\n            // deal with new_node\n            new_node -> val = cur_node -> val;\n            new_node -> random = cur_node -> random;\n\n            hash[cur_node] = new_node;\n\n            cur_node = cur_node -> next;\n            \n            if (cur_node)\n            {\n                new_node -> next = new Node(0);\n                new_node = new_node -> next;\n            }    \n\n        }\n\n        cur_node = new_head;\n        while (cur_node)\n        {\n            cur_node -> random = hash[cur_node -> random];\n            cur_node = cur_node -> next;\n        }\n        return new_head;\n        \n    }\n};","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer"}