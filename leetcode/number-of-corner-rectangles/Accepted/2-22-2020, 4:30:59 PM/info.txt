{"id":305673444,"lang":"python3","time":"1 year, 5 months","timestamp":1582356659,"status_display":"Accepted","runtime":"1308 ms","url":"/submissions/detail/305673444/","is_pending":"Not Pending","title":"Number Of Corner Rectangles","memory":"14 MB","code":"class Solution:\n    def countCornerFromRows(self,grid):\n        num_square = 0 \n        num_bases = [0 for i in range(self.num_cols**2)]\n\n        #for start in range(self.num_cols):\n        #    for end in range(start+1,self.num_cols):\n        #        base_count = 0 \n        #        for row in range(self.num_rows):\n        #            if grid[row][start] == 1 and grid[row][end] == 1 : \n        #                num_square += base_count\n        #                base_count += 1\n\n        for row in range(self.num_rows):\n            for start in range(self.num_cols):\n                if grid[row][start] != 1 :\n                    continue\n                for end in range(start+1,self.num_cols):\n                    if grid[row][end] == 1 : \n                        num_square += num_bases[start*self.num_rows + end]\n                        num_bases[start*self.num_rows+end] += 1 \n\n        return num_square\n\n    def countCornerFromCols(self,grid):\n        num_square = 0 \n        num_bases = [0 for i in range(self.num_rows**2)]\n        #for start in range(self.num_rows):\n        #    for end in range(start+1,self.num_rows):\n        #        base_count = 0 \n        #        for col in range(self.num_cols):\n        #            if grid[start][col] == 1 and grid[end][col] == 1 : \n        #                num_square += base_count\n        #                base_count += 1\n        for col in range(self.num_cols):\n            for start in range(self.num_rows):\n                if grid[start][col] != 1 :\n                    continue\n                for end in range(start+1,self.num_rows):\n                    if grid[end][col] == 1 : \n                        num_square += num_bases[start*self.num_cols + end]\n                        num_bases[start*self.num_cols+end] += 1 \n            \n        return num_square\n\n    def countCornerRectangles(self, grid):\n        self.num_rows = len(grid)\n        self.num_cols = len(grid[0])\n\n        if self.num_rows <=  1 or self.num_cols <= 1 : \n            return 0 \n\n        if self.num_rows <= self.num_cols : \n            return self.countCornerFromRows(grid)\n        else : \n            return self.countCornerFromCols(grid)\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-corner-rectangles"}