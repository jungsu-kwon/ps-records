{"id":305633455,"lang":"python3","time":"1 year, 5 months","timestamp":1582345666,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/305633455/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"16.8 MB","code":"# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n        self.inorder_dict = {}\n        self.postorder = postorder\n        self.n = len(inorder) \n        for i,val in enumerate(inorder):\n            self.inorder_dict[val] = i\n        if len(inorder) == 0 :\n            return None \n        return self.buildTree_(inorder,0,self.n -1)\n        \n    def buildTree_(self,inorder,left,right):\n        if left > right : \n            return None \n        \n        root = TreeNode(self.postorder.pop())\n        ind = self.inorder_dict[root.val]\n        \n        right_subtree = self.buildTree_(inorder,ind+1,right)\n        left_subtree = self.buildTree_(inorder,left,ind-1)\n        \n        if left_subtree != None :\n            root.left = left_subtree\n        if right_subtree != None :\n            root.right = right_subtree\n        return root\n            \n\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}