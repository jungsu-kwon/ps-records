{"id":497763243,"lang":"cpp","time":"2 months, 1 week","timestamp":1621889936,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/497763243/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"26.7 MB","code":"#include <algorithm>\n#include <iostream>\n#include <vector>\nusing namespace std;\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    TreeNode* helper(vector<int>::iterator in_start, \n                     vector<int>::iterator in_end, \n                     vector<int>::iterator post_start, \n                     vector<int>::iterator post_end)\n    {\n        if (in_start == in_end || post_start == post_end) return nullptr;\n        auto root_val = *(post_end - 1);\n        \n        auto root = new TreeNode(root_val);\n\n        auto root_it = find(in_start,in_end,root_val);\n\n        auto offset = distance(in_start,root_it);\n        root -> left  = helper(in_start,root_it,post_start,post_start+offset);\n        \n        root -> right = helper(root_it+1,in_end,post_start+offset,post_end-1);\n\n        return root;\n    }\npublic:\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        return helper(inorder.begin(),inorder.end(),postorder.begin(),postorder.end());\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}