{"id":403537324,"lang":"cpp","time":"10Â months","timestamp":1601648672,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/403537324/","is_pending":"Not Pending","title":"Divide Two Integers","memory":"6.3 MB","code":"static auto x = []() {ios_base::sync_with_stdio(false); cin.tie(NULL); return NULL;}();\n\nclass Solution {\npublic:\n    int divide(const int &x, const int &y)\n    {\n        if (x == INT_MIN && y == -1){return INT_MAX;} // clip to INT_MAX to match test case\n\n        unsigned int dividend = static_cast<unsigned int>(x) * (x<0?-1:1);\n        unsigned int divisor = static_cast<unsigned int>(y) * (y<0?-1:1);\n        const bool neg = (x < 0) ^ (y < 0);\n\n        int msb{31};\n        while(msb>=0){\n            if ( (1<<msb) & divisor){ break; }\n            --msb;\n        }       // get most significant bit of the divisor\n\n\n        int quotient{0};\n        for (int i = (31 - msb); i >= 0; i--)\n        {       // start with divisor shifted into largest column possible\n            if ((divisor << i) <= dividend)\n            {   \n                dividend -= divisor << i;\n                quotient |= 1 << i;\n            }   // subtract multiple of divisor from dividend, add number of multiple to quotient\n        }\n        if (quotient==INT_MIN){ return INT_MIN;} // tricky overflow, int +2147483648 becomes -2147483648\n        return (neg)? (~quotient+1) : quotient;\n    }\n};","compare_resulttitle_slug":"divide-two-integers"}