{"id":517192051,"lang":"python3","time":"4 weeks, 1 day","timestamp":1625392663,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/517192051/","is_pending":"Not Pending","title":"Robot Room Cleaner","memory":"15.1 MB","code":"# \"\"\"\n# This is the robot's control interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class Robot:\n#    def move(self):\n#        \"\"\"\n#        Returns true if the cell in front is open and robot moves into the cell.\n#        Returns false if the cell in front is blocked and robot stays in the current cell.\n#        :rtype bool\n#        \"\"\"\n#\n#    def turnLeft(self):\n#        \"\"\"\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\n#        Each turn will be 90 degrees.\n#        :rtype void\n#        \"\"\"\n#\n#    def turnRight(self):\n#        \"\"\"\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\n#        Each turn will be 90 degrees.\n#        :rtype void\n#        \"\"\"\n#\n#    def clean(self):\n#        \"\"\"\n#        Clean the current cell.\n#        :rtype void\n#        \"\"\"\n\nclass Solution:\n    def init(self,robot):\n        self.pos = [0,0]\n        self.oris = [[-1,0],[0,-1],[1,0],[0,1]]\n        self.ori = 0\n        self.robot = robot\n        self.visited = set([])\n\n    def turn_left(self):\n        self.ori += 1\n        self.ori %= 4\n        self.robot.turnLeft()\n\n    def turn_back(self):\n        self.turn_left()\n        self.turn_left()\n\n    def move(self):\n        '''\n        move one step forward \n        and update internal state\n        return False if move fails\n        return True if move success\n        :rtype bool\n        '''\n\n        if not self.robot.move():\n            return False\n\n        delta = self.oris[self.ori]\n\n        self.pos[0] += delta[0]\n        self.pos[1] += delta[1]\n\n        return True\n\n    def come_back(self):\n        self.turn_back()\n        self.move()\n        self.turn_back()\n\n    def helper(self):\n        self.robot.clean()\n        self.visited.add(tuple(self.pos))\n\n        for i in range(4):\n            delta = self.oris[self.ori]\n\n            cand = [0,0]\n            cand[0] = self.pos[0] + delta[0]\n            cand[1] = self.pos[1] + delta[1]\n\n            if tuple(cand) in self.visited or not self.move():\n                self.turn_left()\n                continue\n\n            self.helper()\n            self.come_back()\n            self.turn_left()\n\n\n    def cleanRoom(self, robot):\n        \"\"\"\n        :type robot: Robot\n        :rtype: None\n        \"\"\"\n        self.init(robot)\n        self.helper()\n\n\n        ","compare_result":"11111111111111111111111111111","title_slug":"robot-room-cleaner"}