// https://leetcode.com/problems/populating-next-right-pointers-in-each-node

# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
        
class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if root == None : 
            return None 
        from collections import deque
        self.queue = deque([root])
        
        while (True) : 
            prev = None 
            for elem in self.queue :  
                if prev != None :
                    prev.next = elem 
                prev = elem 
            n = len(self.queue)
            for i in range(n):
                elem = self.queue.popleft()
                if elem.left != None : 
                    self.queue.append(elem.left)
                    self.queue.append(elem.right)
                elif elem.left == None : 
                    return root 
                    
                    
                    
                