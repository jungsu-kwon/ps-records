// https://leetcode.com/problems/permutations

from typing import List
class Solution:
    def helper(self,nums:List[int],first=0) -> List[List[int]]:
        if first == len(nums):
            self.ans.append(list(nums))
            return

        for i in range(first,len(nums)):
            nums[first],nums[i] = nums[i],nums[first]
            self.helper(nums,first=first+1)

            nums[first],nums[i] = nums[i],nums[first]




    def permute(self, nums: List[int]) -> List[List[int]]:
        if not nums:
            return []
        self.ans = []
        self.helper(nums)
        return self.ans
        