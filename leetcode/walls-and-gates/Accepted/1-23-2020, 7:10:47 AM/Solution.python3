// https://leetcode.com/problems/walls-and-gates

class Solution:
    def valid_children(self,x,y) : 
        if x < 0 or x >= self.w : 
            assert 1==0
        if y < 0 or y >= self.h:
            assert 1==0
        children = [] 
        if x - 1 >= 0  : 
            self.queue.append((x-1,y))
        if x + 1 < self.w:
            self.queue.append((x+1,y))
        if y - 1 >= 0 :
            self.queue.append((x,y-1))
        if y + 1 < self.h : 
            self.queue.append((x,y+1))
            

    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        """
        Do not return anything, modify rooms in-place instead.
        """
        if len(rooms) == 0 : 
            return 
        self.h = len(rooms)
        self.w = len(rooms[0])
        
        for y_ in range(self.h):
            for x_ in range(self.w):
                cur = rooms[y_][x_]
                if cur == 0 : # gate
                    self.queue = [(x_,y_)]
                    visited = set([])
                    
                    step = 0 
                    while (self.queue) : 
                        size = len(self.queue)
                        for i in range(size):
                            node = self.queue.pop(0)
                            if node in visited : 
                                continue
                                
                            x,y = node
                            cur = rooms[y][x] 
                            
                            if cur >= step and cur > 0 :
                                rooms[y][x] = step
                            if cur == 0 and step == 0 :
                                self.valid_children(x,y)
                            elif cur > 0 : 
                                self.valid_children(x,y)
                            visited.add(node)
                        step += 1 
                                
                            
                            
                            
                                
                                
                               
                            
                            

                    
                
                
        
    
        
        