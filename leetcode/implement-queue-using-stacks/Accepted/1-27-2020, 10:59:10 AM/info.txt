{"id":297724415,"lang":"python3","time":"1 year, 6 months","timestamp":1580090350,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/297724415/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"12.6 MB","code":"class MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        self.stack_reverse = [] \n        self.n = 0 \n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        self.stack.append(x)\n        self.n += 1\n        \n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        if len(self.stack_reverse ) == 0  : \n            for i in range(self.n) : \n                a = self.stack.pop()\n                self.stack_reverse.append(a)\n        self.n -= 1 \n        return self.stack_reverse.pop() \n            \n\n        \n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if len(self.stack_reverse) == 0 :\n            for i in range(self.n) : \n                a = self.stack.pop()\n                self.stack_reverse.append(a)\n        return self.stack_reverse[-1]\n        \n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return self.n == 0 \n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()","compare_result":"11111111111111111","title_slug":"implement-queue-using-stacks"}