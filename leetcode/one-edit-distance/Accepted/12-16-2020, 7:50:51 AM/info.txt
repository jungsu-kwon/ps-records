{"id":431053815,"lang":"python3","time":"7 months, 2 weeks","timestamp":1608072651,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/431053815/","is_pending":"Not Pending","title":"One Edit Distance","memory":"14.5 MB","code":"class Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if len(s) == len(t) :\n            diff_count = 0 \n            for char1,char2 in zip(s,t):\n                if char1 == char2 : \n                    continue\n                else : \n                    diff_count += 1\n                    if diff_count > 1 :\n                        return False\n            if diff_count != 1 : \n                return False\n            return True\n\n        if abs(len(s) - len(t)) == 1 : \n            short_str,long_str = sorted((s,t),key = lambda x : len(x))\n            short_len = len(short_str)\n            offset = 0 \n            for i in range(short_len):\n                if short_str[i+offset] != long_str[i] :\n                    offset -= 1 \n                    if offset == -2 : \n                        return False\n              \n            if offset == 0 : \n                return True\n            elif offset == -1 and short_str[-1] == long_str[-1] : \n                return True\n            else :\n                return False\n            \n\n        else : \n            return False\n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"one-edit-distance"}