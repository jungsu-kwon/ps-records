{"id":389098439,"lang":"cpp","time":"11Â months","timestamp":1598906984,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/389098439/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"19.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isLeaf(TreeNode* root){\n        return (root->left == nullptr && root->right == nullptr);\n    }\n    int maxDepth(TreeNode* root) {\n        if (root == nullptr)\n            return 0;\n        int right_depth = maxDepth(root->left);\n        int left_depth = maxDepth(root->right);\n        return std::max(left_depth,right_depth) + 1 ;\n        \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree"}