{"id":476963588,"lang":"python3","time":"3 months, 4 weeks","timestamp":1617659290,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/476963588/","is_pending":"Not Pending","title":"Ternary Expression Parser","memory":"N/A","code":"from collections import deque\nclass Solution:\n    def solve(self,start_ind: int) -> str:\n        '''\n        evaluate exp from start_ind\n        update self.queue inplace\n        '''\n        if start_ind >= self.n:\n            return \n\n        ques_ind  = self.exp.find('?',start_ind)\n        truthy = self.exp[start_ind:ques_ind]\n\n        next_ques = self.exp.find('?',ques_ind+1)\n        left_ind = self.exp.find(':',ques_ind)\n\n        if next_ques !=  -1 and left_ind > next_ques:\n            left = self.solve(ques_ind + 1)\n        else:\n            left = self.exp[ques_ind+1:left_ind]\n\n        next_colon = self.exp.find(':',left_ind + 1)\n        if next_colon == -1: next_colon = self.n\n        next_ques  = self.exp.find('?',left_ind + 1)\n        if next_ques ==  -1: next_ques  = self.n\n\n        if next_colon <= next_ques:\n            right = self.exp[left_ind+1:next_colon]\n        else:\n            right = self.solve(left_ind+1)\n\n        if truthy == 'F' or truthy == '0':\n            return right\n        return left\n\n    def parseTernary(self, expression: str) -> str:\n        self.queue = deque()\n        self.exp = expression\n        self.n = len(expression)\n\n        return self.solve(0)\n\n\n\n\n        \n","compare_result":"1111011011001110110011010100010101011001101111011","title_slug":"ternary-expression-parser"}