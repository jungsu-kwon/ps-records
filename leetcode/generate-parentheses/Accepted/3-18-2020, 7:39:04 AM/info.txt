{"id":313412971,"lang":"python3","time":"1Â year, 4Â months","timestamp":1584484744,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/313412971/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"13.3 MB","code":"class Solution(): \n    def valid_neighbors(self,node,maxi) : \n        paren,count = node\n        ret = []\n        if count - 1 >= 0 :\n            ret.append((paren+')',count -1))\n        if count + 1 <= maxi : \n            ret.append((paren+'(',count+1))\n        return ret\n\n\n    def generateParenthesis(self,n):\n        if n == 0 : \n            return []\n        \n        root = ('(',1)\n        stack  = [root]\n        num_chars = 1\n\n        while stack : \n            num_pops = len(stack)\n            stack_ = [] \n            \n\n            for i in range(num_pops):\n                node = stack[i]\n                neighbors = self.valid_neighbors(node,2*n - (num_chars+1))\n                stack_.extend(neighbors)\n            stack = stack_\n\n            num_chars += 1 \n            if num_chars == 2*n : \n                return [paren[0] for paren in stack]\n\n","compare_result":"11111111","title_slug":"generate-parentheses"}