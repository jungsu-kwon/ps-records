{"id":494597704,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1621286971,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/494597704/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"7.4 MB","code":"#include <iostream>\nusing namespace std;\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\nprivate:\n    Node* helper(Node* head)\n    {\n        if (!head) return nullptr;\n\n        auto cur_node = head;\n        auto tail = head;\n        \n        while(cur_node)\n        {\n            if (cur_node -> child)\n            {\n                auto child = cur_node -> child;\n                auto new_tail = helper(child);\n                auto ori_next = cur_node -> next;\n\n                new_tail -> next = ori_next;\n                if (ori_next)\n                    ori_next -> prev = new_tail;\n\n                child -> prev = cur_node;\n                cur_node -> next = child;\n\n                cur_node -> child = nullptr;\n                tail = new_tail;\n                cur_node = ori_next;\n                \n\n            }\n            else\n            {\n                tail = cur_node;\n                cur_node = cur_node -> next;\n            }\n\n\n        }\n        return tail;\n    }\npublic:\n    Node* flatten(Node* head) {\n        helper(head);\n\n\n        return head;\n        \n    }\n};","compare_result":"11111111111111111111111111","title_slug":"flatten-a-multilevel-doubly-linked-list"}