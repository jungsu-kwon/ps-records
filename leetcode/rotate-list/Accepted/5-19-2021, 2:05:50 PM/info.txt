{"id":495188149,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1621400750,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/495188149/","is_pending":"Not Pending","title":"Rotate List","memory":"11.8 MB","code":"#include <queue>\n#include <iostream>\nusing namespace std;\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    int get_length(ListNode* head,ListNode* &tail)\n    {\n        auto cur = head;\n        int count = 0;\n        while (cur)\n        {\n            count++;\n            tail = cur;\n            cur = cur -> next;\n        }\n        return count;\n    }\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if (!head) return head;\n        auto tail = head;\n        auto n = get_length(head,tail);\n        auto rotate = n - k % n;\n\n        tail -> next = head;\n        auto prehead = tail;\n        for (auto i = 0; i < rotate; ++i)\n            prehead = prehead -> next;\n        \n        head = prehead -> next;\n        prehead -> next = nullptr;\n        return head;\n\n\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list"}