{"id":389657186,"lang":"cpp","time":"11Â months","timestamp":1599003372,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/389657186/","is_pending":"Not Pending","title":"Shortest Unsorted Continuous Subarray","memory":"26.6 MB","code":"class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        // find first decreasing element\n        int nFirstDecrease = -1 ;\n        for (auto t = 0;t < nums.size()-1;++t){\n            if (nums[t] > nums[t+1]){\n                nFirstDecrease = t;\n                break;\n            }\n        }\n        if (nFirstDecrease == -1) return 0;\n        int nLastDecrease = -1;\n        for (auto t = nums.size()-1; t>0; --t){\n            if (nums[t] < nums[t-1]){\n                nLastDecrease = t;\n                break;\n            }\n        }\n        //std::cout << nFirstDecrease << \" \" << nLastDecrease << std::endl;\n        auto minimax = std::minmax_element(nums.begin()+nFirstDecrease,\n                                           nums.begin()+nLastDecrease+1);\n        int mini = *minimax.first; \n        int maxi = *minimax.second;\n        std::cout<<\"mini : \" << mini << \" maxi : \" << maxi <<std::endl;\n        int nStart = 0, nEnd = nums.size()-1;\n        for (auto num : nums){\n            if(num > mini)\n                break;\n            nStart ++;\n        }\n        for (auto t = nums.size()-1;t>0;--t ){\n            if(nums[t] < maxi){\n                nEnd = t;\n                break;\n            }\n        }\n        //std::cout << nEnd << \" \" << nStart <<std::endl;\n        return nEnd-nStart+1;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-unsorted-continuous-subarray"}