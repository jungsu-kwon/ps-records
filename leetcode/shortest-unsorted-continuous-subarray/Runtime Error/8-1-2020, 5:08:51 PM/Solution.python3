// https://leetcode.com/problems/shortest-unsorted-continuous-subarray

class Solution:
    def findUnsortedSubarray(self, nums):
        n = len(nums)
        if n <= 1 : 
            return 0 
        # find leftmost and rightmost nonsorted elem
        left_ind,right_ind = None,None
        for i in range(1,n):
            if nums[i] < nums[i-1]:
                left_ind = i
                break
        for i in range(1,n):
            if nums[n-i] < nums[n-i-1]  : 
                right_ind = n-i-1
                break
        # it means array is sorted
        if left_ind == None or right_ind == None : 
            return 0 

        # find mini and maxi in unsorted segment
        mini,maxi = min(nums[left_ind:right_ind+1]),max(nums[left_ind:right_ind+1])
        for i,num in enumerate(nums) : 
            if num > mini : 
                left = i
                break
        for i,num in enumerate(nums[::-1]):
            if num < maxi : 
                right = n-i-1
                break
        return right - left + 1 

