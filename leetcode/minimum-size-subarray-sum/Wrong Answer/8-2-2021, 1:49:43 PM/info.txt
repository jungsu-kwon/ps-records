{"id":531921093,"lang":"python3","time":"1Â day, 3Â hours","timestamp":1627879783,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/531921093/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"from typing import List\n\nclass Solution:\n\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        partialSums: List[int] = [0 for num in nums]\n\n        curSum: int = 0\n        for i, num in enumerate(nums):\n            curSum += num\n            partialSums[i] = curSum\n        \n        def getPartialSum(start: int, end: int) -> int:\n            # sum(nums[start:end]) in O(n)\n            if start > end: return 0\n            if start == 0: return partialSums[end-1]\n\n            return partialSums[end-1] - partialSums[start-1]\n\n        ans: int = None\n        for i in range(len(nums)):\n            start: int = i\n            left: int = i\n            right: int = len(nums)\n\n            while left < right:\n                mid: int = (left + right) // 2\n                if (partialSum:=getPartialSum(start,mid)) > target:\n                    right = mid -1\n                    ans = min(ans,mid - start) if ans else mid - start \n\n                elif partialSum < target:\n                    left = mid + 1\n                else:\n                    ans = min(ans,mid - start) if ans else mid - start \n                    break\n            \n            if getPartialSum(start,left) >= target:\n                ans = min(ans,left - start) if ans else left - start\n        return ans","compare_result":"1101101111110111011","title_slug":"minimum-size-subarray-sum"}