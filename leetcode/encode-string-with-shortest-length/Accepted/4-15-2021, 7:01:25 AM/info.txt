{"id":480708411,"lang":"python3","time":"3 months, 2 weeks","timestamp":1618437685,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/480708411/","is_pending":"Not Pending","title":"Encode String with Shortest Length","memory":"14.7 MB","code":"class Solution:\n    def encode_substr(self,substr) -> None:\n        if len(substr) <= 4:\n            return substr\n        \n        if substr in self.memo:\n            return self.memo[substr]\n\n        n = len(substr)\n        ans = substr\n\n        for i in range(1,(n//2) + 1):\n            prefix = substr[:i]\n            suffix = substr[i:]\n\n            count = self._get_count(prefix,suffix)\n            encoded_prefix = self.encode_substr(prefix)\n            encoded_suffix = self.encode_substr(suffix)\n\n            cand = encoded_prefix + encoded_suffix\n\n            if count > 0:\n                suff_ind = len(prefix) * (count+1)\n                temp_prefix = self.encode_substr(substr[suff_ind:])\n                temp_cand = f\"{count+1}[{encoded_prefix}]{temp_prefix}\"\n\n                cand = min(cand,temp_cand,key= lambda x : len(x))\n\n            ans = min(ans,cand,key= lambda x : len(x))\n\n        self.memo[substr] = ans\n        return ans\n\n    def encode(self, s: str) -> str:\n        self.memo = {}\n        return self.encode_substr(s)\n\n\n    def _get_count(self,prefix,suffix):\n        count, n = 0, len(prefix)\n        cur_str = suffix\n        while cur_str.startswith(prefix):\n            count += 1\n            cur_str = cur_str[n:]\n        return count\n        \n\n\n            \n\n\n\n\n        \n\n\n\n        \n","compare_result":"1111111111111111111111111111111111111111","title_slug":"encode-string-with-shortest-length"}