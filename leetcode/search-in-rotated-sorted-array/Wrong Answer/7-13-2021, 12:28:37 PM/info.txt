{"id":521651195,"lang":"python3","time":"3Â weeks","timestamp":1626146917,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/521651195/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"from typing import List\nclass Solution:\n    def isLeft(self,num: int) -> bool:\n        \"\"\"\n        return if num is located left to rotation pivot\n        type: int\n        rtype: bool\n        \"\"\"\n        if num > self.leftVal and num > self.rightVal:\n            return True \n        return False\n\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left: int = 0\n        right: int = len(nums) - 1\n        self.leftVal = 0\n        self.rightVal = nums[right]\n\n        while left <= right:\n            mid: int = (left + right) // 2\n            midVal: int = nums[mid]\n            if self.isLeft(midVal):\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        # rotation pivot if minimum \n        # value in the search region\n        pivot:int = left\n\n        if nums[pivot] == target:\n            return pivot \n        elif nums[pivot] < target:\n            left: int = pivot\n            right: int = len(nums) - 1\n        else:\n            left: int = 0\n            right: int = pivot - 1\n        \n        while left <= right:\n            mid: int = (left + right) // 2\n            midVal: int = nums[mid]\n            if midVal < target:\n                left = mid + 1\n            elif midVal == target:\n                return mid\n            else:\n                right = mid - 1\n        return -1\n\n        \n        \n\n\n\n\n        ","compare_result":"111111111111101111111111101011111101110000111111101001110011010110010101111111010111111000011111101101111111111111010011111101110111000111111110111111011111110111011100101101011010010111011111111","title_slug":"search-in-rotated-sorted-array"}