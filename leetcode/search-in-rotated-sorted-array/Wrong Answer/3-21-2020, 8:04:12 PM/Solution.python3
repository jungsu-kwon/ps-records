// https://leetcode.com/problems/search-in-rotated-sorted-array

class Solution():
    def search(self,nums,target):
        import math
        import bisect
        if not nums : 
            return -1
        elif len(nums) == 1 :
            if target != nums[0]:
                return -1
            else :
                return 0 
        n = len(nums)

        low,high = 0,n-1
        while low <= high : 
            m = int(math.floor((low+high)/2))
            if m + 1 > n-1 or nums[m] > nums[m+1] : 
                break
            elif nums[m] > nums[0]:
                low = m + 1 
            else : 
                high = min(m-1,0)
        def binary_search(a, x,offset=0):
            i = bisect.bisect_right(a, x)
            if i != len(a) + 1 and a[i-1] == x:
               return i-1 + offset
            else:
               return -1
        if m+1>n-1 or not (nums[m] > nums[m+1]):
            return binary_search(nums,target)
        elif target >= nums[0] : 
            return binary_search(nums[:m+1],target)
        else:
            return binary_search(nums[m+1:],target,offset=m+1)
        return -1 
