{"id":396284230,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1600207759,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/396284230/","is_pending":"Not Pending","title":"Sort List","memory":"15.7 MB","code":"class Solution {\nprivate:\n\tListNode* mergeSort(ListNode* head,int listSize){\n        \n\t\tif (listSize <= 1 || head ==nullptr)\n\t\t\treturn head;\n\t\tListNode* leftNode = head;\n\t\tListNode* rightNode = head;\n\t\tListNode* prevNode = nullptr;\n\t\tint rightInd = 0;\n\t\twhile (rightInd < listSize /2 && rightNode != nullptr){\n\t\t\tprevNode = rightNode;\n\t\t\trightNode = rightNode->next;\n\t\t\trightInd += 1 ;\n\n\t\t}\n\t\tprevNode->next = nullptr;\n\t\tauto leftHead =  mergeSort(leftNode,listSize/2);\n\t\tauto rightHead = mergeSort(rightNode,listSize - (listSize/2));\n\t\tListNode preHead(0);\n\t\tListNode* curNode = &preHead;\n\n\t\twhile (leftHead != nullptr && rightHead != nullptr){\n\t\t\tif (leftHead->val <= rightHead->val)\n\t\t\t{\n\t\t\t\tcurNode->next = leftHead;\n\t\t\t\tleftHead = leftHead->next;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcurNode->next = rightHead;\n\t\t\t\trightHead = rightHead->next;\n\t\t\t}\n\t\t\tcurNode = curNode->next;\n\t\t}\n        if (rightHead != nullptr){\n            curNode->next = rightHead;   \n        }\n        else if (leftHead != nullptr){\n            curNode->next = leftHead;\n        }\n\n\t\treturn preHead.next;\n\t}\n\npublic:\n\tListNode* sortList(ListNode* head) \n\t{\n\t\tauto curNode = head;\n\t\tauto listSize  = 0 ;\n\t\twhile (curNode != nullptr){\n\t\t\t++listSize;\n\t\t\tcurNode = curNode->next;\n\t\t}\n\n\t\treturn mergeSort(head,listSize);\n\t}\n};\n\n","compare_result":"1111111111111111","title_slug":"sort-list"}