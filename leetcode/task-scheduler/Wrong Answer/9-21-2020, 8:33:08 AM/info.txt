{"id":398503341,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1600644788,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/398503341/","is_pending":"Not Pending","title":"Task Scheduler","memory":"N/A","code":"#include <vector>\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nclass Solution {\npublic:\n    int leastInterval(vector<char>& tasks, int n) {\n\t\tstd::unordered_map<int,int> counter;\n\t\tif (tasks.size() == 0 ) return 0;\n\t\tauto numTasks = tasks.size();\n\t\tauto ind = 0;\n\t\tauto maxi = 0;\n\n\n\t\twhile (ind != tasks.size()-1){\n\t\t\tauto count = 0 ;\n\t\t\tauto prevChar = tasks[ind];\n\t\t\twhile (ind != tasks.size()-1 && tasks[ind] == prevChar){\n\t\t\t\tind += 1;\n\t\t\t\tcount += 1 ;\n\t\t\t}\n            if (ind == tasks.size()-1) ++count;\n\t\t\tcounter[count] += 1;\n\t\t\tmaxi = std::max(maxi,count);\n\t\t}\n\t\tauto initIdle = std::max(0,n-counter[maxi]+1)*(maxi-1);\n\t\tauto nonBottleNeck = numTasks - maxi*counter[maxi];\n        std::cout << nonBottleNeck << std::endl;\n        std::cout << initIdle << std::endl;\n        std::cout << maxi << std::endl;\n\t\tif (initIdle == 0 || initIdle < nonBottleNeck)\n\t\t\treturn tasks.size();\n\t\treturn (maxi-1)*(n+1) + counter[maxi];\n    }\n};\n\n\n","compare_result":"11111101001110100011111101000111000000000100000000010000000001000000000","title_slug":"task-scheduler"}