{"id":530208900,"lang":"python3","time":"4 days, 16 hours","timestamp":1627576080,"status_display":"Accepted","runtime":"316 ms","url":"/submissions/detail/530208900/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"32.5 MB","code":"class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.children['.'] = []\n        self.finish = False\n\n    def search(self,word: str):\n        if not word: return self.finish\n\n        if not word[0] in self.children:\n            return False\n\n        if word[0] == '.':\n            for child in self.children['.']:\n                if child.search(word[1:]):\n                    return True\n            return False\n\n        return self.children[word[0]].search(word[1:])\n\nclass Trie:\n    def __init__(self):\n        self.root: TrieNode = TrieNode()\n    \n    def insert(self,word: str) -> None:\n        curNode: TrieNode = self.root\n        for ch in word:\n            if not ch in curNode.children:\n                curNode.children[ch] = TrieNode()\n                curNode.children['.'].append(\n                    curNode.children[ch])\n                \n            curNode = curNode.children[ch]\n\n        curNode.finish = True\n\n    def search(self,word:str) -> bool:\n        return self.root.search(word)\n\nclass WordDictionary:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.trie: Trie = Trie()\n        \n\n    def addWord(self, word: str) -> None:\n        self.trie.insert(word)\n\n    def search(self, word: str) -> bool:\n        return self.trie.search(word)\n\n        \n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}