{"id":338495584,"lang":"python3","time":"1 year, 2 months","timestamp":1589324824,"status_display":"Accepted","runtime":"4772 ms","url":"/submissions/detail/338495584/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock with Cooldown","memory":"14.1 MB","code":"class Solution:\n    def maxProfit(self, prices):\n        n = len(prices)\n        if n <=1 : \n            return 0 \n        elif n == 2 : \n            return max(0,prices[1]-prices[0])\n        self.dp = [0 for i in range(n)]\n        self.dp[1],self.dp[2] = max(0,prices[1]-prices[0]),max(0,\n                                                    prices[2]-prices[1],\n                                                    prices[1]-prices[0],\n                                                    prices[2]-prices[0])\n        #print(prices)\n        #print('###############')\n        mini,maxi,diff = prices[0],0,0\n        for i in range(1,n):\n            maxi = max(maxi,prices[i])\n            diff = max(maxi-mini,diff)\n            self.dp[i] = max(diff,0)\n            if prices[i] < mini : \n                maxi,mini = prices[i],prices[i]\n\n        for i in range(n-2):\n            base = self.dp[i]\n            mini,maxi,diff = prices[i+2],0,0\n            for j in range(i+2,n):\n                maxi = max(maxi,prices[j])\n                diff = max(diff,maxi-mini)\n                self.dp[j] = max(self.dp[j],base+diff)\n                if prices[j] < mini : \n                    maxi,mini = prices[j],prices[j]\n        return self.dp[n-1]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-with-cooldown"}