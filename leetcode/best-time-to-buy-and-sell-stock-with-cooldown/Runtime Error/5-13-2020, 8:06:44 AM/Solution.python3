// https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown

class Solution:
    def maxProfit(self, prices):
        n = len(prices)
        if n <=1 : 
            return 0 
        self.dp = [0 for i in range(n)]
        self.dp[1],self.dp[2] = max(0,prices[1]-prices[0]),max(0,
                                                    prices[2]-prices[1],
                                                    prices[1]-prices[0],
                                                    prices[2]-prices[0])
        #print(prices)
        #print('###############')
        mini,maxi,diff = prices[0],0,0
        for i in range(1,n):
            maxi = max(maxi,prices[i])
            diff = max(maxi-mini,diff)
            self.dp[i] = max(diff,0)
            if prices[i] < mini : 
                maxi,mini = prices[i],prices[i]

        for i in range(n-2):
            base = self.dp[i]
            mini,maxi,diff = prices[i+2],0,0
            for j in range(i+2,n):
                maxi = max(maxi,prices[j])
                diff = max(diff,maxi-mini)
                self.dp[j] = max(self.dp[j],base+diff)
                if prices[j] < mini : 
                    maxi,mini = prices[j],prices[j]
        return self.dp[n-1]