{"id":395275136,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1600034161,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/395275136/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26.8 MB","code":"\nclass Solution {\npublic:\n\tTreeNode* buildTree(std::vector<int>& preorder, std::vector<int>& inorder, int preStart,int preEnd, int inStart,int inEnd){\n\t\tif (inStart > std::min(inEnd,int(inorder.size()-1)) || preStart >std::min( preEnd,int(preorder.size()-1))) return nullptr;\n\t\tauto root = new TreeNode(preorder[preStart]);\n\t\t// preorder root,l,l,l,l,l,l,l,l,l,r,r,r,r,r,r\n\t\t// inorder l,l,l,l,l,l,l,l, root ,r,r,r,r,r,r\n\t\tint rootInd = find(inorder.begin() + inStart, inorder.begin() + inEnd,preorder[preStart]) - inorder.begin();\n\t\tint treeSize = inEnd - inStart  + 1 ; \n\t\tint leftSize = rootInd - inStart;\n\t\tint rightSize = treeSize - leftSize; \n\n\t\tauto leftRoot = buildTree(preorder,inorder,preStart +1,preStart+1 + leftSize-1,inStart,inStart + leftSize -1);\n\t\tauto rightRoot = buildTree(preorder,inorder,preStart + leftSize + 1, preEnd, inStart + leftSize + 1,  inEnd);\n\n\t\troot->left = leftRoot;\n\t\troot->right = rightRoot;\n\t\treturn root;\n\n\t}\n\tTreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n\t\treturn buildTree(preorder,inorder,0,preorder.size()-1,0,inorder.size()-1);\n\t}\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}