{"id":305633332,"lang":"python3","time":"1 year, 5 months","timestamp":1582345627,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/305633332/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"16.8 MB","code":"# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        if len(inorder) == 0 : \n            return None \n        \n        self.inorder_dict= {}\n        self.inorder = inorder\n        self.n = len(inorder)\n        \n        for i,val in enumerate(inorder) : \n            self.inorder_dict[val] = i \n            \n        from collections import deque\n        self.preorder = deque(preorder)\n        \n        return self.buildTree_(0,self.n-1)\n    \n    def buildTree_(self,left,right):\n        if left > right : \n            return None \n        root = TreeNode(self.preorder.popleft())\n        ind = self.inorder_dict[root.val]\n        left_subtree = self.buildTree_(left,ind-1)\n        right_subtree = self.buildTree_(ind+1,right)\n        \n        if left_subtree != None :\n            root.left = left_subtree\n        if right_subtree != None :\n            root.right = right_subtree\n        return root \n            \n        \n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}