// https://leetcode.com/problems/longest-palindromic-substring

class Solution:
    def longestPalindrome(self, s):
        list_str = list(s)
        n = len(list_str)
        if n == 0 : 
            return '' 
        elif n == 1 : 
            return s[0]
        
        #note_char_center = [0 for i in range(n)]
        #note_space_center = [0 for i in range(n-1)]
        maxi = -1 
        cand = ''
        
        # for char centre  
        for i in range(n) : 
            max_char = max(min(i,n-1-i),0)
            for j in range(max_char) : 
                left,right = list_str[i-j-1],list_str[i+j+1]
                if left != right : 
                    break
                elif left == right : 
                    len_substr = 2*j + 3 
                    if len_substr > maxi : 
                        maxi= len_substr
                        cand = (i-j-1,i+j+1)


        # for space_center 
        for i in range(n-1):
            max_char = max(min(i+1,n-i-1),0)
            for j in range(max_char) : 
                left,right = list_str[i-j],list_str[i+j+1]
                if left != right : 
                    break
                else : 
                    len_substr = 2*j+2
                    if len_substr > maxi : 
                        maxi = len_substr
                        cand = (i-j,i+j+1)

        return ''.join(list_str[cand[0]:cand[1]+1])


