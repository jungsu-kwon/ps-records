{"id":391704184,"lang":"cpp","time":"11Â months","timestamp":1599371313,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/391704184/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\nprivate : \n    std::string helper(const string &s,int t){\n        int l= t, r = t ; \n        std::string maxCand;\n        while (l>=0 && r < s.size() ){\n            if (s[r] == s[l]){\n                maxCand = s.substr(l,r-l+1);\n                if (r < s.size()-1 && l > 0 ){\n                    ++r; --l;\n                }\n                else\n                    break;\n            }\n            else \n                break;\n        }\n\n        l=t+1;r=t;\n        std::string maxCandRight = \"\";\n        if (l < s.size()){\n            while (l >= 0 && r < s.size()){ \n                if (s[l] == s[r]){\n                    maxCandRight = s.substr(l,r-l+1);\n                    if (l >0 && r < s.size() -1){\n                        ++r ; \n                        --l ;\n                    }\n                    else \n                        break;\n                }\n                else \n                    break;\n            }\n        }\n        maxCand = (maxCand.size() > maxCandRight.size()) ? maxCand : maxCandRight;\n        return maxCand;\n    }\npublic:\n    string longestPalindrome(string s) {\n        std::string maxPalin = \"\";\n        std::string curPalin = \"\";\n        for (auto t = 0 ; t < s.size(); ++t){\n            curPalin = helper(s,t);\n            if (maxPalin.size() < curPalin.size())\n                maxPalin = curPalin;\n        }\n        return maxPalin;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"longest-palindromic-substring"}