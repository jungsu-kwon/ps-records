// https://leetcode.com/problems/longest-palindromic-substring

class Solution:
    def longestPalindrome(self, s):
        n = len(s)
        if n == 0 : 
            return ''
        elif n == 1 : 
            return s[0]
        input_str = list(s)
        dp = [1 for i in range(n)]
        dp_same = [1 for i in range(n)]
        dp[0] = 1
        maxi = 0
        cand = input_str[0]
        for i in range(1,n):
            cur = input_str[i]
            # first calc first type :
            to_check = i - 1 - dp[i-1]
            if to_check >= 0 : 
                if input_str[to_check] == cur : 
                    dp[i] = dp[i-1] + 2 
            # start over 
            if i >= 2 and input_str[i-2] == cur :  
                dp[i] = max(dp[i],3 )
            # from same dp
            if input_str[i-1] == cur : 
                dp[i] = max(dp[i],dp_same[i-1]+1)


            # secondly calc second type all same
            to_check = i - 1 
            if cur == input_str[i-1] : 
                dp_same[i] = dp_same[i-1]+1

            # update cand and max
            if maxi < dp[i] : 
                cand = input_str[i-dp[i]+1:i+1]
                maxi = dp[i]
            if maxi < dp_same[i] : 
                cand = cur * dp_same[i]
                maxi = dp_same[i]
        return ''.join(cand)
