{"id":294544609,"lang":"python3","time":"1 year, 6 months","timestamp":1579127153,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/294544609/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        self.count = 0 \n        self.head = 0  \n        self.queue = [-1] * k\n        self.length = k\n    def tail(self):\n        if self.isEmpty() :\n            #print(self.head)\n            return self.head\n        else : \n            #print((self.head + self.count -1) % self.length)\n            return (self.head + self.count -1) % self.length\n        \n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if not self.isFull() : \n            self.queue[self.tail()] = value\n            self.count += 1 \n            #print(self.queue,self.head,self.count )\n            return True\n        else : \n            return False\n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if not self.isEmpty():\n            self.queue[self.head] = -1\n            self.count -= 1 \n            self.head += 1 \n            self.head %= self.length\n            #print(self.queue,self.head,self.count )\n            return True\n        else : \n            return False\n\n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.\n        \"\"\"\n        if self.isEmpty() :\n            return -1 \n        else : \n            return self.queue[self.head]\n\n    def Rear(self) -> int:\n        \"\"\"\n        Get the last item from the queue.\n        \"\"\"\n        if self.isEmpty() : \n            return -1\n        else : \n            return self.queue[self.tail()]\n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        \"\"\"\n        return self.count == 0 \n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        \"\"\"\n        return self.count == self.length\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()","compare_result":"0101010000000000000000000000000000000000000000000000","title_slug":"design-circular-queue"}