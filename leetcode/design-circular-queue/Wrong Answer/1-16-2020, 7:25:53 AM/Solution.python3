// https://leetcode.com/problems/design-circular-queue

class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.count = 0 
        self.head = 0  
        self.queue = [-1] * k
        self.length = k
    def tail(self):
        if self.isEmpty() :
            #print(self.head)
            return self.head
        else : 
            #print((self.head + self.count -1) % self.length)
            return (self.head + self.count -1) % self.length
        

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if not self.isFull() : 
            self.queue[self.tail()] = value
            self.count += 1 
            #print(self.queue,self.head,self.count )
            return True
        else : 
            return False
    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if not self.isEmpty():
            self.queue[self.head] = -1
            self.count -= 1 
            self.head += 1 
            self.head %= self.length
            #print(self.queue,self.head,self.count )
            return True
        else : 
            return False

    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if self.isEmpty() :
            return -1 
        else : 
            return self.queue[self.head]

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if self.isEmpty() : 
            return -1
        else : 
            return self.queue[self.tail()]

    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        return self.count == 0 

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        return self.count == self.length
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()