{"id":294536349,"lang":"python3","time":"1 year, 6 months","timestamp":1579125081,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/294536349/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        self.empty_numb = -1\n        self.queue = [self.empty_numb]*k\n        self.head = -1\n        self.tail = -1\n        self.length = k\n        \n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if (self.isFull()): \n           # print(self.queue,self.head,self.tail)\n            return False\n        else :\n            if self.isEmpty() : \n                self.head = 0 \n                self.tail = -1\n                \n            self.tail += 1 \n            self.tail %= self.length\n            self.queue[self.tail] = value \n            #print(self.queue,self.head,self.tail)\n            return True\n        \n\n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.isEmpty() : \n            #print(self.queue,self.head,self.tail)\n            return False\n        else : \n            self.queue[self.head] = -1 \n            self.head += 1 \n            self.head %= self.length\n            if self.isEmpty() : \n                self.head = -1 \n                self.tail = -1\n            #print(self.queue,self.head,self.tail)\n            return True\n\n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.\n        \"\"\"\n        # you could simply return self.queue[head] \n        # with current implementation\n        # but you could always change implementation details \n        # safer to have some safeguards\n        \n        if self.isEmpty() : \n            return -1\n        else : \n            return self.queue[self.head]\n\n    def Rear(self) -> int:\n        \"\"\"\n        Get the last item from the queue.\n        \"\"\"\n        if self.isEmpty() : \n            return -1\n        else : \n            return self.queue[self.tail]\n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        \"\"\"\n        return ((self.tail) % self.length) == (self.head % self.length) and (self.queue[self.head]==self.empty_numb)\n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        \"\"\"\n        return ((self.tail + 1) % self.length) == (self.head % self.length)\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()","compare_result":"1010001111110101001110111100111000101001100101110000","title_slug":"design-circular-queue"}