{"id":294548450,"lang":"python3","time":"1 year, 6 months","timestamp":1579128103,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/294548450/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"13 MB","code":"class MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        self.head = 0 \n        self.count = 0 \n        self.queue = [0] * k\n        self.length = k\n        \n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.isFull()  :  \n            return False\n        self.queue[(self.head + self.count)%self.length ] = value\n        self.count += 1 \n        return True\n        \n\n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.isEmpty() : \n            return False\n        self.queue[self.head % self.length] = 0\n        self.head = (self.head +1) % self.length\n        self.count -= 1 \n        return True\n        \n\n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.\n        \"\"\"\n        if self.isEmpty() : \n            return -1 \n        return self.queue[(self.head)%self.length] \n        \n\n    def Rear(self) -> int:\n        \"\"\"\n        Get the last item from the queue.\n        \"\"\"\n        if self.isEmpty() : \n            return -1 \n        return self.queue[(self.head+self.count-1)%self.length] \n        \n        \n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        \"\"\"\n        return self.count == 0\n        \n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        \"\"\"\n        return self.count == self.length\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue"}