// https://leetcode.com/problems/implement-stack-using-queues

class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue1 = []
        self.queue2 = []
        self.n = 0 
        

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        if len(self.queue1) == 0 : 
            self.queue2.append(x)
        else : 
            self.queue1.append(x)
        self.n += 1 
        

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        if len(self.queue1) == 0 :
            for i in range(self.n-1) : 
                a = self.queue2.pop(0)
                self.queue1.append(a)
            self.n -= 1 
            return self.queue2.pop(0)
        elif len(self.queue2) == 0 : 
            for i in range(self.n-1):
                a = self.queue1.pop(0)
                self.queue2.append(a)
            self.n -= 1 
            return self.queue1.pop(0)

        

    def top(self) -> int:
        """
        Get the top element.
        """
        if len(self.queue1) == 0 :
            for i in range(self.n) : 
                a = self.queue2.pop(0)
                self.queue1.append(a)
            return a
        elif len(self.queue2) == 0 : 
            for i in range(self.n):
                a = self.queue1.pop(0)
                self.queue2.append(a)
            return a
        

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return self.n == 0 
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()