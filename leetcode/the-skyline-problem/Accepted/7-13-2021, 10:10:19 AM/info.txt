{"id":521599044,"lang":"python3","time":"3Â weeks","timestamp":1626138619,"status_display":"Accepted","runtime":"232 ms","url":"/submissions/detail/521599044/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"21.4 MB","code":"from collections import namedtuple\nfrom collections import defaultdict\nimport heapq\nfrom typing import List, Dict ,Set\n\nBuilding = namedtuple(\"building\", [\"left\",\"right\",\"height\"])\nRooftop = namedtuple(\"rooftop\", [\"negHeight\",\"right\"])\nPoint = namedtuple(\"point\",[\"x\",\"y\"])\n\nclass Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        buildings: List[Building] = [Building(*b) for b in buildings]\n        transitions: List[int] = [b.left for b in buildings] + [b.right for b in buildings]\n        transitions = sorted(list(set(transitions)))\n\n        roofHeap: List[Rooftop] = []\n        buildDict: Dict[int,Set[Building]] = defaultdict(set)\n        for b in buildings:\n            buildDict[b.left].add(b)\n\n        prevHeight: int = 0\n        ans: List[Point] = []\n\n        for transition in transitions:\n            for b in buildDict[transition]:\n                heapq.heappush(roofHeap,Rooftop(-b.height,b.right))\n            \n            while roofHeap and roofHeap[0].right <= transition:\n                _ = heapq.heappop(roofHeap)\n            \n            height: int = 0\n            if roofHeap:\n                height = -roofHeap[0].negHeight\n            if prevHeight != height:\n                ans.append(Point(transition,height))\n                prevHeight = height\n        return ans","compare_result":"1111111111111111111111111111111111111111","title_slug":"the-skyline-problem"}