// https://leetcode.com/problems/the-skyline-problem

from collections import namedtuple
from collections import defaultdict
import heapq
from typing import List, Dict ,Set

Building = namedtuple("building", ["left","right","height"])
Rooftop = namedtuple("rooftop", ["negHeight","right"])
Point = namedtuple("point",["x","y"])

class Solution:
    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        buildings: List[Building] = [Building(*b) for b in buildings]
        transitions: List[int] = [b.left for b in buildings] + [b.right for b in buildings]
        transitions = sorted(list(set(transitions)))

        roofHeap: List[Rooftop] = []
        buildDict: Dict[int,Set[Building]] = defaultdict(set)
        for b in buildings:
            buildDict[b.left].add(b)

        prevHeight: int = 0
        ans: List[Point] = []

        for transition in transitions:
            for b in buildDict[transition]:
                heapq.heappush(roofHeap,Rooftop(-b.height,b.right))
            
            while roofHeap and roofHeap[0].right <= transition:
                _ = heapq.heappop(roofHeap)
            
            height: int = 0
            if roofHeap:
                height = -roofHeap[0].negHeight
            if prevHeight != height:
                ans.append(Point(transition,height))
                prevHeight = height
        return ans