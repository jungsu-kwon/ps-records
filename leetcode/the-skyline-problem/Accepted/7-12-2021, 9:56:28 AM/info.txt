{"id":521050903,"lang":"python3","time":"3 weeks, 1 day","timestamp":1626051388,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/521050903/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"21.3 MB","code":"from typing import List, Set, Dict\nfrom collections import namedtuple\nfrom collections import defaultdict\nimport heapq\n\nPoint    = namedtuple(\"point\",   [\"x\",\"y\"])\nBuilding = namedtuple(\"building\",[\"left\",\"right\",\"height\"])\nRooftop  = namedtuple(\"rooftop\", [\"negHeight\",\"rightend\"])\n\nclass Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        # NOTE: huge copy operation is performed --> hurts performance\n        buildings : List[Building] = [Building(*b) for b in buildings]\n        transitions = [b.left for b in buildings] + [b.right for b in buildings]\n        transitions : List[int] = sorted(set(transitions))\n\n        buildDict : Dict[int,Set[Building]] = defaultdict(set)\n        for b in buildings:\n            buildDict[b.left].add(b)\n        \n        roofHeap: List[Rooftop] = []\n        out: List[Point] = []\n        lastHeight: int = 0\n        \n        for transition in transitions:\n            for b in buildDict[transition]:\n                heapq.heappush(roofHeap,Rooftop(-b.height,b.right))\n            \n            while roofHeap and roofHeap[0].rightend <= transition:\n                _ = heapq.heappop(roofHeap)\n\n            height: int = 0\n            if roofHeap:\n                height = -roofHeap[0].negHeight\n\n            if height != lastHeight:\n                out.append(Point(transition,height))\n                lastHeight = height\n        return out\n","compare_result":"1111111111111111111111111111111111111111","title_slug":"the-skyline-problem"}