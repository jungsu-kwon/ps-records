// https://leetcode.com/problems/the-skyline-problem

from typing import List,Dict
from collections import namedtuple
from collections import defaultdict
import heapq

# NamedTuples make code more readable.
Point = namedtuple('point',['x', 'y'])
Building = namedtuple("building",['left','right','height'])
# heap entry, height is negative
Rooftop = namedtuple('rooftop',['height','rightEnd'])

class Solution: 
    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # Named tuple conversion.
        buildings = [Building(*b) for b in buildings]
        
        # Build a list of points where a building either begins or ends.
        transitions = [ b.left for b in buildings ] + [b.right for b in buildings]
        transitions = sorted(list(set(transitions)))
                
        # left -> building
        buildDict: Dict[int, Building] = defaultdict(set)
        for b in buildings:
            buildDict[b.left] |= {b}
        
        roofHeap: List[Rooftop] = []
        out = []
        lastHeight = 0
        
		# Iterate through building transition points.
        for x in transitions:
            # Add new buildings
            for b in buildDict[x]:
                # heapq only supports minheap, so use negative height for maxheap.
                rooftop = Rooftop(-b.height, b.right)
                heapq.heappush(roofHeap, rooftop)
            
            # Remove building at root of heap if position is past the building's end. 
            while roofHeap and roofHeap[0].rightEnd <= x:
                throwaway = heapq.heappop(roofHeap)
            
            # Add a point if the heaproot height is different from previous height.
            maxHeight = 0
            if roofHeap:
                # Negate to extract max from minheap.
                maxHeight = -roofHeap[0].height
            if maxHeight != lastHeight:
                lastHeight = maxHeight
                p = Point(x, maxHeight)
                out.append(p)
                
        return out