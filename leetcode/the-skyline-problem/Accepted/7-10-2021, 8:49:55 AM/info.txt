{"id":520020261,"lang":"python3","time":"3 weeks, 3 days","timestamp":1625874595,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/520020261/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"21.2 MB","code":"from typing import List,Dict\nfrom collections import namedtuple\nfrom collections import defaultdict\nimport heapq\n\n# NamedTuples make code more readable.\nPoint = namedtuple('point',['x', 'y'])\nBuilding = namedtuple(\"building\",['left','right','height'])\n# heap entry, height is negative\nRooftop = namedtuple('rooftop',['height','rightEnd'])\n\nclass Solution: \n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        # Named tuple conversion.\n        buildings = [Building(*b) for b in buildings]\n        \n        # Build a list of points where a building either begins or ends.\n        transitions = [ b.left for b in buildings ] + [b.right for b in buildings]\n        transitions = sorted(list(set(transitions)))\n                \n        # left -> building\n        buildDict: Dict[int, Building] = defaultdict(set)\n        for b in buildings:\n            buildDict[b.left] |= {b}\n        \n        roofHeap: List[Rooftop] = []\n        out = []\n        lastHeight = 0\n        \n\t\t# Iterate through building transition points.\n        for x in transitions:\n            # Add new buildings\n            for b in buildDict[x]:\n                # heapq only supports minheap, so use negative height for maxheap.\n                rooftop = Rooftop(-b.height, b.right)\n                heapq.heappush(roofHeap, rooftop)\n            \n            # Remove building at root of heap if position is past the building's end. \n            while roofHeap and roofHeap[0].rightEnd <= x:\n                throwaway = heapq.heappop(roofHeap)\n            \n            # Add a point if the heaproot height is different from previous height.\n            maxHeight = 0\n            if roofHeap:\n                # Negate to extract max from minheap.\n                maxHeight = -roofHeap[0].height\n            if maxHeight != lastHeight:\n                lastHeight = maxHeight\n                p = Point(x, maxHeight)\n                out.append(p)\n                \n        return out","compare_result":"1111111111111111111111111111111111111111","title_slug":"the-skyline-problem"}