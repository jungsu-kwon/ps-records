{"id":297751955,"lang":"python3","time":"1 year, 6 months","timestamp":1580096532,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/297751955/","is_pending":"Not Pending","title":"Flood Fill","memory":"12.6 MB","code":"class Solution:\n    def floodFill(self, image, sr, sc, newColor) :\n        self.rows = len(image)\n        self.cols = len(image[0])\n\n        self.color = image[sr][sc]\n        self.queue = [(sr,sc)]\n        self.visited = set([])\n\n        while self.queue : \n            node = self.queue.pop()\n            i,j = node \n            if (i,j) in self.visited : \n                continue\n\n            if image[i][j] == self.color: \n                image[i][j] = newColor\n            else : \n                continue\n\n\n            if i-1 >= 0  and not ((i-1,j) in self.visited) : \n                self.queue.append((i-1,j))\n            if j-1 >= 0  and not ((i,j-1) in self.visited) : \n                self.queue.append((i,j-1))\n            if i+1 <  self.rows  and not ((i+1,j) in self.visited) : \n                self.queue.append((i+1,j))\n            if j+1 <  self.cols  and not ((i,j+1) in self.visited) : \n                self.queue.append((i,j+1))\n\n            self.visited.add((i,j))\n        return image\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill"}