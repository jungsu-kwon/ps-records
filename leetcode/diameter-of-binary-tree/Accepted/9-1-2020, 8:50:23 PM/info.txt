{"id":389399157,"lang":"cpp","time":"11Â months","timestamp":1598961023,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/389399157/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int nDiameter = 0;\n    int computeDepth(TreeNode* root){\n        if (root == nullptr)\n            return -1;\n        int nLeftDepth = computeDepth(root->left)+1;\n        int nRightDepth = computeDepth(root->right)+1;\n        \n        nDiameter = std::max(nDiameter,nLeftDepth+nRightDepth);\n        return std::max(nLeftDepth,nRightDepth);\n    }\n    int diameterOfBinaryTree(TreeNode* root) {\n       computeDepth(root); \n       return nDiameter;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree"}