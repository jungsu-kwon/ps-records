{"id":297812941,"lang":"python3","time":"1 year, 6 months","timestamp":1580111920,"status_display":"Accepted","runtime":"864 ms","url":"/submissions/detail/297812941/","is_pending":"Not Pending","title":"01 Matrix","memory":"15.6 MB","code":"class Solution:\n    def updateMatrix(self, matrix):\n        self.num_rows = len(matrix)\n        self.num_cols = len(matrix[0])\n        self.matrix = matrix\n        self.dist = [[0 for i in range(self.num_cols)] for i in range(self.num_rows)]\n        \n        for i in range(self.num_rows):\n            for j in range(self.num_cols) : \n                cur = matrix[i][j]\n                if cur == 1 : \n                    self.bfs(i,j) \n        return self.dist\n\n    def bfs(self,i_,j_) : \n        queue = [(i_,j_)] \n        visited = set([])\n        step =  0\n\n        while queue : \n            n = len(queue)\n            for i in range(n): \n                node = queue.pop(0)\n                i,j = node\n                cur = self.matrix[i][j]\n                if cur == 0 : \n                    self.dist[i_][j_] = step \n                    return \n                if (i,j) in visited : \n                    continue\n\n                if i-1 >= 0 and not ((i-1,j) in visited) : \n                    queue.append((i-1,j))\n                if j-1 >= 0 and not ((i,j-1) in visited) : \n                    queue.append((i,j-1))\n                if i + 1 < self.num_rows and not ((i+1,j) in visited) : \n                    queue.append((i+1,j))\n                if j + 1 < self.num_cols  and not ((i,j+1) in visited) : \n                    queue.append((i,j+1))\n                visited.add((i,j))\n            step += 1 ","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"01-matrix"}