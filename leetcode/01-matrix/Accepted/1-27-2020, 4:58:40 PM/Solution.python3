// https://leetcode.com/problems/01-matrix

class Solution:
    def updateMatrix(self, matrix):
        self.num_rows = len(matrix)
        self.num_cols = len(matrix[0])
        self.matrix = matrix
        self.dist = [[0 for i in range(self.num_cols)] for i in range(self.num_rows)]
        
        for i in range(self.num_rows):
            for j in range(self.num_cols) : 
                cur = matrix[i][j]
                if cur == 1 : 
                    self.bfs(i,j) 
        return self.dist

    def bfs(self,i_,j_) : 
        queue = [(i_,j_)] 
        visited = set([])
        step =  0

        while queue : 
            n = len(queue)
            for i in range(n): 
                node = queue.pop(0)
                i,j = node
                cur = self.matrix[i][j]
                if cur == 0 : 
                    self.dist[i_][j_] = step 
                    return 
                if (i,j) in visited : 
                    continue

                if i-1 >= 0 and not ((i-1,j) in visited) : 
                    queue.append((i-1,j))
                if j-1 >= 0 and not ((i,j-1) in visited) : 
                    queue.append((i,j-1))
                if i + 1 < self.num_rows and not ((i+1,j) in visited) : 
                    queue.append((i+1,j))
                if j + 1 < self.num_cols  and not ((i,j+1) in visited) : 
                    queue.append((i,j+1))
                visited.add((i,j))
            step += 1 