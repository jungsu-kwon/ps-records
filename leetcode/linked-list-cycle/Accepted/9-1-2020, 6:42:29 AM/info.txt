{"id":389116672,"lang":"cpp","time":"11Â months","timestamp":1598910149,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/389116672/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"7.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if(head == nullptr)\n            return false;\n        ListNode *slowNode = head->next;\n        ListNode *fastNode = head->next;\n        if (fastNode == nullptr)\n            return false;\n        fastNode = fastNode->next;\n        \n        while (fastNode != nullptr){\n            if (fastNode == slowNode)\n                return true;\n            slowNode = slowNode->next;\n            fastNode = fastNode->next;\n            if (fastNode == nullptr)\n                return false;\n            fastNode = fastNode->next;\n            \n        }\n        return false;\n        \n        \n    }\n};","compare_result":"11111111111111111","title_slug":"linked-list-cycle"}