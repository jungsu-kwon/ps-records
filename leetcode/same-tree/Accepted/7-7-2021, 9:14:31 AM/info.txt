{"id":518497468,"lang":"python3","time":"3 weeks, 6 days","timestamp":1625616871,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/518497468/","is_pending":"Not Pending","title":"Same Tree","memory":"14.3 MB","code":"from collections import deque\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def is_same(self,p : TreeNode,q : TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val == q.val:\n            return True\n        return False\n\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        queue = deque([(p,q)])\n\n        while queue:\n            p,q = queue.popleft()\n            if not self.is_same(p,q):\n                return False\n            if p is None:\n                continue\n\n            queue.append((p.left,q.left))\n            queue.append((p.right,q.right))\n            \n            \n        return True\n\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"same-tree"}