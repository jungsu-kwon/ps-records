{"id":447122362,"lang":"python3","time":"6 months, 1 week","timestamp":1611480073,"status_display":"Accepted","runtime":"492 ms","url":"/submissions/detail/447122362/","is_pending":"Not Pending","title":"Number of Islands II","memory":"21 MB","code":"class Solution:\n    def numIslands2(self, m: int, n: int, positions: List[List[int]]) -> List[int]:\n        parents,ranks,count = {},{},0\n        \n        def find(x):\n            if parents[x] != x:\n                return find(parents[x])\n            return x \n        \n        def union(x,y):\n            nonlocal count\n            root1,root2 = find(x),find(y)\n            \n            if root1 != root2:\n                root1,root2 = sorted([root1,root2],key=lambda x : -ranks[x])\n                parents[root2] = root1\n                ranks[root1] += ranks[root1] == ranks[root2]\n                count -= 1\n        \n        def add(position):\n            nonlocal count\n            if tuple(position) in parents:\n                return count\n            i,j = position\n            x = parents[x] = i,j\n            ranks[x] = 0\n            count += 1\n            \n            for neighbor in [(i-1,j),(i+1,j),(i,j-1),(i,j+1)]:\n                if neighbor in parents:\n                    union(x,neighbor)\n            return count\n        return [add(posit) for posit in positions]\n                \n                \n            ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-islands-ii"}