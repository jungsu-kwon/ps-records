{"id":447128384,"lang":"python3","time":"6 months, 1 week","timestamp":1611481496,"status_display":"Accepted","runtime":"484 ms","url":"/submissions/detail/447128384/","is_pending":"Not Pending","title":"Number of Islands II","memory":"21.5 MB","code":"class Solution:\n    def numIslands2(self, m: int, n: int, positions: List[List[int]]) -> List[int]:\n        parents,ranks,count = {},{},0\n        \n        def add(position):\n            nonlocal count\n            if position in parents:\n                return count\n            count += 1\n            i,j = position\n            ranks[position] = 0\n            parents[position] = position\n            for neighbor in [(i,j+1),(i,j-1),(i+1,j),(i-1,j)]:\n                if neighbor in parents:\n                    union(neighbor,position)\n            return count\n            \n        def union(x,y):\n            nonlocal count\n            root1,root2 = find(x),find(y)\n            \n            if root1 != root2:\n                large,small = sorted([root1,root2],key=lambda x : -ranks[x])\n                parents[small] = large\n                ranks[large] += ranks[large] == ranks[small]\n                count -= 1\n        \n        \n        def find(x):\n            if parents[x] == x:\n                return x\n            return find(parents[x])\n        return [add(tuple(position)) for position in positions]\n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-islands-ii"}