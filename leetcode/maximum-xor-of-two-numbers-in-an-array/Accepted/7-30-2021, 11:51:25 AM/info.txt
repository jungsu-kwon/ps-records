{"id":530414183,"lang":"python3","time":"4 days, 5 hours","timestamp":1627613485,"status_display":"Accepted","runtime":"2548 ms","url":"/submissions/detail/530414183/","is_pending":"Not Pending","title":"Maximum XOR of Two Numbers in an Array","memory":"98.2 MB","code":"class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        # Compute length L of max number in a binary representation\n        L = len(bin(max(nums))) - 2\n        # zero left-padding to ensure L bits for each number\n        nums = [[(x >> i) & 1 for i in range(L)][::-1] for x in nums]\n        \n        max_xor = 0\n        trie = {}\n        for num in nums:\n            node = trie\n            xor_node = trie\n            curr_xor = 0\n            for bit in num:\n                # insert new number in trie\n                if not bit in node:\n                    node[bit] = {}\n                node = node[bit]\n                \n                # to compute max xor of that new number \n                # with all previously inserted\n                toggled_bit = 1 - bit\n                if toggled_bit in xor_node:\n                    curr_xor = (curr_xor << 1) | 1\n                    xor_node = xor_node[toggled_bit]\n                else:\n                    curr_xor = curr_xor << 1\n                    xor_node = xor_node[bit]\n                    \n            max_xor = max(max_xor, curr_xor)\n\n        return max_xor","compare_result":"11111111111111111111111111111111111111111","title_slug":"maximum-xor-of-two-numbers-in-an-array"}