{"id":530414086,"lang":"python3","time":"4 days, 5 hours","timestamp":1627613469,"status_display":"Accepted","runtime":"4200 ms","url":"/submissions/detail/530414086/","is_pending":"Not Pending","title":"Maximum XOR of Two Numbers in an Array","memory":"145.4 MB","code":"from typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n\nclass Solution:\n    def __init__(self):\n        self.root: TrieNode = TrieNode()\n        self.maxBits: int = 0\n\n    def getBinary(self, num:int) -> List[int]:\n        return [(num >> i) & 1  for i in range(self.maxBits)][::-1]\n\n\n\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        self.maxBits = len(bin(max(nums))) - 2\n        ans: int = 0\n\n        for num in nums:\n            curNode: TrieNode = self.root\n            xorNode: TrieNode = self.root\n\n            bits: List[int] = self.getBinary(num)\n            xor: int = 0\n            for bit in bits:\n                xor <<= 1\n                # insert nodes\n                if not bit in curNode.children:\n                    curNode.children[bit] = TrieNode()\n                curNode = curNode.children[bit]\n\n                # compute xor\n                xorBit: int = 1 - bit\n                if xorBit in xorNode.children:\n                    xor += 1\n                    xorNode = xorNode.children[xorBit]\n                else:\n                    xorNode = xorNode.children[1 - xorBit]\n\n            ans = max(xor,ans)\n        return ans\n\n\n\n            \n\n\n        \n\n            \n            \n        ","compare_result":"11111111111111111111111111111111111111111","title_slug":"maximum-xor-of-two-numbers-in-an-array"}