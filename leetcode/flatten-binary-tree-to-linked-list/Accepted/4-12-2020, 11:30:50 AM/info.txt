{"id":323396240,"lang":"python3","time":"1 year, 3 months","timestamp":1586658650,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/323396240/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"14.7 MB","code":"class Solution:\n    def helper(self,root):\n        right,left = root.right,root.left\n        if right == None and left == None :\n            return root\n        elif left != None and right != None : \n            flatten = self.helper(left)\n            root.right = left\n            root.left = None\n            flatten.right = right\n            flatten = self.helper(right)\n            return flatten\n        elif left == None :\n            flatten = self.helper(right)\n            return flatten\n        elif right == None : \n            flatten = self.helper(left)\n            root.right = left\n            root.left = None \n            return flatten\n\n\n        \n    def flatten(self, root: TreeNode) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        if root != None :  \n            self.helper(root)\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}