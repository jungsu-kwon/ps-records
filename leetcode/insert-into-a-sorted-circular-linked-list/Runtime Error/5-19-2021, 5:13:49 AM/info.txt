{"id":495029300,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1621368829,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/495029300/","is_pending":"Not Pending","title":"Insert into a Sorted Circular Linked List","memory":"N/A","code":"#include <iostream>\nusing namespace std;\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n    }\n\n    Node(int _val, Node* _next) {\n        val = _val;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* insert(Node* head, int insertVal) {\n        auto tail = head;\n        auto new_head = tail->next;\n        tail -> next = nullptr;\n\n        auto cur_node = new_head;\n        Node* next_node = nullptr;\n        Node* insert_node = new Node(insertVal);\n        \n        auto inserted = false;\n        while (cur_node)\n        {\n            auto left = cur_node -> val;\n            next_node = cur_node -> next;\n            auto right = next_node ? next_node -> val : new_head -> val;\n\n            if (left <= right)\n            {\n                if (insertVal >= left && insertVal <= right)\n                {\n                    cur_node -> next = insert_node;\n                    insert_node -> next = next_node;\n                    inserted = true;\n                    break;\n                }\n            }\n            else\n            {\n                if (insertVal >= left || insertVal <= right)\n                {\n                    cur_node -> next = insert_node;\n                    insert_node -> next = next_node;\n                    inserted = true;\n                    break;\n                }\n\n            }\n            cur_node = cur_node -> next;\n\n        }\n\n        while (tail->next)\n        {\n            tail = tail -> next;\n        }\n        if (!inserted) \n        {\n            tail -> next = insert_node;\n            tail = insert_node;\n        }\n\n        tail -> next = new_head;\n        return head;\n    }\n};","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"insert-into-a-sorted-circular-linked-list"}