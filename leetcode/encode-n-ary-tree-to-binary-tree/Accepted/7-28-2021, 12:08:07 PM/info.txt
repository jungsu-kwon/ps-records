{"id":529417443,"lang":"python3","time":"6 days, 5 hours","timestamp":1627441687,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/529417443/","is_pending":"Not Pending","title":"Encode N-ary Tree to Binary Tree","memory":"18.1 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\"\"\"\n\nclass Codec:\n    # Encodes an n-ary tree to a binary tree.\n    def encode(self, root: 'Node') -> TreeNode:\n        if not root: return None\n\n        treeRoot: TreeNode = TreeNode(root.val)\n        children: List[TreeNode] = [self.encode(child) \n            for child in root.children]\n        \n        prevChild: Any[TreeNode,None] = None\n        treeRoot.left = children[0] if children else None\n\n        for child in children:\n            if prevChild:\n                prevChild.right = child\n            prevChild = child\n\n        return treeRoot\n\t\n\t# Decodes your binary tree to an n-ary tree.\n    def decode(self, data: TreeNode) -> 'Node':\n        if not data: \n            return None\n\n        root: Node = Node(data.val)\n        children: List[Node] = []\n        curChild: TreeNode = data.left\n\n        while curChild:\n            children.append(self.decode(curChild))\n            curChild = curChild.right\n        \n        root.children = children\n        return root","compare_result":"11111111111111111111111111111111111111","title_slug":"encode-n-ary-tree-to-binary-tree"}