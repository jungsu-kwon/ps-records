// https://leetcode.com/problems/split-array-largest-sum

from typing import List

class Solution:
    def increasing(self,nums: List[int],totalSum: int, index: int) -> int:
        if index == len(nums) - 1: return True
        leftSum:int = sum(nums[:index+1])
        curSum: int = max(totalSum - leftSum, leftSum)

        nextSum: int = leftSum + nums[index+1]
        nextSum: int = max(nextSum, totalSum - nextSum)

        return curSum <= nextSum










    def splitArray(self, nums: List[int], m: int) -> int:
        left: int = 0
        right: int = len(nums) - 1
        totalSum: int = sum(nums)

        while left < right:
            mid: int = (left + right) // 2

            if self.increasing(nums,totalSum,mid):
                right = mid
            else:
                left = mid +1
        
        leftSum: int = sum(nums[:left+1])
        return max(totalSum - leftSum, leftSum)





