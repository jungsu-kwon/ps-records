{"id":531954118,"lang":"python3","time":"1 day, 2 hours","timestamp":1627884875,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/531954118/","is_pending":"Not Pending","title":"Calculate Maximum Information Gain","memory":"14.4 MB","code":"class Solution:\n    import math\n    def calculateMaxInfoGain(self, petal_length: List[float], species: List[str]) -> float:\n        #convert species to indicies\n        n = len(petal_length)\n        species_to_idx = {}\n        species_idx, tups = 0, []\n        for idx, ele in enumerate(species):\n            if not ele in species_to_idx:\n                species_to_idx[ele] = species_idx\n                species_idx += 1                \n            tups.append((petal_length[idx], species_to_idx[ele]))\n        #sort tuples\n        tups.sort(key= lambda x: x[0])\n        \n        \n        def _info(loft):\n            l = [i[1] for i in loft]\n            info = 0\n            for i in set(l):\n                prob = l.count(i) / len(loft)\n                info += -1.0*prob*math.log2(prob)\n            return info\n                \n        total_entropy = _info(tups)\n        max_entropy = 0\n        for i in range(1,len(tups)):\n            a1 = _info(tups[i:])*len(tups[i:])/n\n            a2 = _info(tups[:i])*len(tups[:i])/n\n            x = total_entropy - a1 - a2\n            if x > max_entropy:\n                max_entropy = x\n        \n        return max_entropy\n","compare_result":"111111","title_slug":"calculate-maximum-information-gain"}