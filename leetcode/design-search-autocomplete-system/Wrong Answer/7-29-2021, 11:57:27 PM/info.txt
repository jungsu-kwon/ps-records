{"id":530173263,"lang":"python3","time":"4 days, 17 hours","timestamp":1627570647,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/530173263/","is_pending":"Not Pending","title":"Design Search Autocomplete System","memory":"N/A","code":"from typing import Dict, List\nfrom collections import namedtuple\nimport bisect\n\nHotSentence = namedtuple(\"hotsentence\",\n    [\"negHotness\",\"sentence\"])\n\nclass TrieNode:\n    def __init__(self):\n       self.children: Dict[str,TrieNode] = {}\n       self.hotSentences: List[HotSentence] = []\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        self.top_k = 3\n        self.curNode = self.root\n\n    def index(self,curNode: TrieNode, hotSentence: HotSentence) -> int:\n        for i,(negHotness,sentence) in enumerate(curNode.hotSentences):\n            if sentence == hotSentence.sentence:\n                return i\n        return -1\n\n    def insert(self, hotSentence: HotSentence) -> None:\n        curNode: TrieNode = self.root\n        for ch in hotSentence.sentence:\n            if not ch in curNode.children:\n                curNode.children[ch] = TrieNode()\n            curNode = curNode.children[ch]\n            \n            if (sentInd := self.index(curNode,hotSentence)) != -1:\n                sentence: str = hotSentence.sentence\n                freq: int = curNode.hotSentences[sentInd].negHotness - 1\n                \n                toAdd: HotSentence = HotSentence(sentence=sentence,\n                    negHotness=freq) \n                curNode.hotSentences = curNode.hotSentences[:sentInd] \\\n                    + curNode.hotSentences[sentInd+1:]\n                bisect.insort(curNode.hotSentences,toAdd)\n\n            else:\n                bisect.insort(curNode.hotSentences,\n                    hotSentence)\n\n    def search(self, sentence: str) -> List[str]:\n        for ch in sentence:\n            if not ch in self.curNode.children: return []\n            self.curNode = self.curNode.children[ch]\n        return [hotSentence.sentence for hotSentence \n            in self.curNode.hotSentences[:self.top_k]]\n\n    def reset(self) -> None:\n        self.curNode = self.root\n        \n\n\nclass AutocompleteSystem:\n    def __init__(self, sentences: List[str], times: List[int]):\n        self.trie = Trie()\n        self.word = \"\"\n        for sentence,time in zip(sentences,times):\n            hotSentence: HotSentence = HotSentence(-time,sentence)\n            self.trie.insert(hotSentence)\n\n    def input(self, c: str) -> List[str]:\n        if c == \"#\":\n            self.trie.reset()\n            self.trie.insert(HotSentence(-1,self.word))\n            self.word = \"\"\n            return []\n        \n        self.word += c\n        return self.trie.search(c)\n        \n\n\n# Your AutocompleteSystem object will be instantiated and called as such:\n# obj = AutocompleteSystem(sentences, times)\n# param_1 = obj.input(c)","compare_result":"1110000000000000000000000000000000000000000","title_slug":"design-search-autocomplete-system"}