{"id":445629077,"lang":"python3","time":"6 months, 2 weeks","timestamp":1611179995,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/445629077/","is_pending":"Not Pending","title":"Smallest Rectangle Enclosing Black Pixels","memory":"N/A","code":"black = '1'\nwhite = '0'\nclass Solution:\n    def validChildren(self,x,y):\n        moves = [(1,0),(-1,0),(0,1),(0,-1)]\n        children = []\n        for move in moves:\n            cand = (x+move[0],y+move[1])\n            if cand in self.visited:\n                continue\n            if cand[0] < 0 or cand[0] >= self.height or cand[1] < 0 or cand[1] >= self.width:\n                continue\n            if self.image[cand[0]][cand[1]] == white:\n                continue\n            children.append(cand)\n            \n        return children\n            \n        \n        \n    def minArea(self, image: List[List[str]], x: int, y: int) -> int:\n        self.height = len(image)\n        if not self.height:\n            return 0\n        self.width = len(image[0])\n        self.visited = set()\n        self.image = image\n        self.x1,self.x2 = x,x\n        self.y1,self.y2 = y,y\n        \n        self.queue = self.validChildren(x,y)\n        \n        while self.queue:\n            n = len(self.queue)\n            for i in range(n):\n                pixel = self.queue.pop(0)\n\n                self.x1,self.x2 = min(self.x1,pixel[0]),max(self.x2,pixel[0])\n                self.y1,self.y2 = min(self.y1,pixel[1]),max(self.y2,pixel[1])\n                self.visited.add(pixel)\n                self.queue += self.validChildren(*pixel)\n        return (self.x2 - self.x1+1) * (self.y2 - self.y1+1)\n                \n        \n        \n        ","compare_result":"111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"smallest-rectangle-enclosing-black-pixels"}