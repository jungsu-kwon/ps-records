{"id":510377082,"lang":"python3","time":"1 month, 2 weeks","timestamp":1624153274,"status_display":"Accepted","runtime":"176 ms","url":"/submissions/detail/510377082/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"20.5 MB","code":"class Solution:\n    def binary_search(self, matrix, target, start, vertical):\n        lo = start\n        hi = len(matrix[0]) - 1 if vertical else len(matrix) - 1\n\n        while hi >= lo:\n            mid = (lo + hi) // 2\n            if vertical: # searching a column\n                if matrix[start][mid] < target:\n                    lo = mid + 1\n                elif matrix[start][mid] > target:\n                    hi = mid - 1\n                else:\n                    return True\n            else: # searching a row\n                if matrix[mid][start] < target:\n                    lo = mid + 1\n                elif matrix[mid][start] > target:\n                    hi = mid - 1\n                else:\n                    return True\n        \n        return False\n\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        # an empty matrix obviously does not contain `target`\n        if not matrix:\n            return False\n\n        # iterate over matrix diagonals starting in bottom left.\n        for i in range(min(len(matrix), len(matrix[0]))):\n            vertical_found = self.binary_search(matrix, target, i, True)\n            horizontal_found = self.binary_search(matrix, target, i, False)\n            if vertical_found or horizontal_found:\n                return True\n        \n        return False","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix-ii"}