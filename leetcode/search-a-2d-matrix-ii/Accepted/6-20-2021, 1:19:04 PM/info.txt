{"id":510452964,"lang":"python3","time":"1 month, 2 weeks","timestamp":1624162744,"status_display":"Accepted","runtime":"208 ms","url":"/submissions/detail/510452964/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"20.6 MB","code":"class Solution:\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        def helper(matrix, i, j, k, l, target):\n            if i == j and k == l:\n                return matrix[i][k] == target\n            elif i <= j and k <= l:\n                x = (j - i) // 2 + i\n                y = (l - k) // 2 + k\n                if matrix[x][y] == target:\n                    return True\n                elif matrix[x][y] > target:\n                    return helper(matrix, i, j, k, y-1, target) or helper(matrix, i, x-1, k, l, target)\n                else:\n                    return helper(matrix, i, x, y+1, l, target) or helper(matrix, x+1, j, k, l, target)\n            else:\n                return False\n        if not matrix:\n            return False\n        if not matrix[0]:\n            return False\n\t\t# Check boundy\n        if matrix[0][0] > target:\n            return False\n        m, n = len(matrix)-1, len(matrix[0])-1\n        if matrix[m][n] < target:\n            return False\n        return helper(matrix, 0, m, 0, n, target)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix-ii"}