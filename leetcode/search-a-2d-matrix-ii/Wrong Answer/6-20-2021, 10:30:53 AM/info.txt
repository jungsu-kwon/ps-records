{"id":510374457,"lang":"python3","time":"1 month, 2 weeks","timestamp":1624152653,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/510374457/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"N/A","code":"import bisect\nfrom typing import List\nclass Solution:\n    def helper(self,matrix,y1,y2,x1,x2):\n        if y1 > y2 or x1 > x2:\n            return False\n        x1 = bisect.bisect_right(matrix[y2],self.target)\n        if x1 == self.num_cols: return False\n        if matrix[y2][x1] == self.target:\n            return True\n            \n        x2 = bisect.bisect_left(matrix[y1],self.target)\n        if x2 == self.num_cols: return False\n        if matrix[y1][x2] == self.target:\n            return True\n        \n        y1 = bisect.bisect_right([matrix[i][x2] for i in range(y1,y2)],self.target) \n        if y1 == self.num_rows: return False\n        if matrix[x2][y1] == self.target:\n            return True\n\n        y2 = bisect.bisect_left([matrix[i][x1] for i in range(y1,y2)],self.target)\n        if y2 == self.num_rows: return False\n        if matrix[x1][y2] == self.target:\n            return True\n        \n        return self.helper(matrix, y1+1, y2-1, x1+1, x2-1)\n        \n        \n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n\n        self.num_rows = len(matrix)\n        self.num_cols = 0 if not self.num_rows else len(matrix[0])\n        self.target = target\n\n        if not self.num_cols or not self.num_rows:\n            return False\n\n        return self.helper(matrix,0,self.num_rows-1,0,self.num_cols-1)","compare_result":"111101101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"search-a-2d-matrix-ii"}