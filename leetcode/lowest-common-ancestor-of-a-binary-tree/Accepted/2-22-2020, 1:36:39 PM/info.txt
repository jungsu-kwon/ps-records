{"id":305635324,"lang":"python3","time":"1 year, 5 months","timestamp":1582346199,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/305635324/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"28.9 MB","code":"# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nfrom collections import deque\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root == None : \n            return None \n        _,pPath = self.path(root,p.val)\n        _,qPath = self.path(root,q.val)\n        cur = root \n        n = min(len(pPath),len(qPath))\n        for i in range(n):\n            pdir,qdir = pPath[i],qPath[i]\n            \n            if qdir != pdir :\n                return cur\n            elif qdir == pdir:\n                if pdir == 'L' : \n                    cur = cur.left\n                else :\n                    cur = cur.right\n        return cur\n                   \n        \n    def path(self,root,p):\n        if root == None : \n            return False,deque([])\n        if root.val == p:\n            return True,deque([])\n        left_exists,left_path = self.path(root.left,p)\n        \n        if left_exists : \n            left_path.appendleft('L')\n            return True,left_path\n        else :\n            right_exists,right_path = self.path(root.right,p)\n            \n            if right_exists : \n                right_path.appendleft('R')\n                return True,right_path\n            else : \n                return False,deque([])\n        \n        \n        \n        \n            \n        ","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}