{"id":432271750,"lang":"python3","time":"7 months, 2 weeks","timestamp":1608386086,"status_display":"Accepted","runtime":"1952 ms","url":"/submissions/detail/432271750/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"14.6 MB","code":"class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        num_rows = len(grid)\n        if num_rows :\n            num_cols = len(grid[0])\n\n        dp = [[-float(\"inf\") for i in range(num_cols)] for i in range(num_cols)]\n        dp[0][num_cols-1] = grid[0][0] + grid[0][num_cols-1]\n\n        for i in range(num_rows-1):\n            dp_new = [[0 for i in range(num_cols)] for i in range(num_cols)]\n            for c1 in range(num_cols):\n                for c2 in range(num_cols):\n                    maxi = max([dp[c1+offset1][c2+offset2] for offset1 in range(max(-1,-c1),min(2,num_cols-c1)) \n                                                           for offset2 in range(max(-1,-c2),min(2,num_cols-c2))])\n                    if c1 == c2 : \n                        dp_new[c1][c2] = maxi + grid[i+1][c1]\n                    else : \n                        dp_new[c1][c2] = maxi + grid[i+1][c1] + grid[i+1][c2]\n            dp = dp_new \n        return max([max(dp_list) for dp_list in dp])\n            \n\n\n\n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup-ii"}