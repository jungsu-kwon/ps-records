{"id":432273258,"lang":"python3","time":"7 months, 2 weeks","timestamp":1608386579,"status_display":"Accepted","runtime":"1960 ms","url":"/submissions/detail/432273258/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"22.2 MB","code":"class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[[0]*n for _ in range(n)] for __ in range(m)]\n\n        for row in reversed(range(m)):\n            for col1 in range(n):\n                for col2 in range(n):\n                    result = 0\n                    # current cell\n                    result += grid[row][col1]\n                    if col1 != col2:\n                        result += grid[row][col2]\n                    # transition\n                    if row != m-1:\n                        result += max(dp[row+1][new_col1][new_col2]\n                                      for new_col1 in [col1, col1+1, col1-1]\n                                      for new_col2 in [col2, col2+1, col2-1]\n                                      if 0 <= new_col1 < n and 0 <= new_col2 < n)\n                    dp[row][col1][col2] = result\n        return dp[0][0][n-1]","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup-ii"}