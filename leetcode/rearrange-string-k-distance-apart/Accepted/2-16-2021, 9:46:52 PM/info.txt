{"id":456760579,"lang":"python3","time":"5 months, 2 weeks","timestamp":1613479612,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/456760579/","is_pending":"Not Pending","title":"Rearrange String k Distance Apart","memory":"15.5 MB","code":"from collections import Counter\n\nclass Solution:\n\n    def rearrangeString(self, s: str, k: int) -> str:\n        if not s : \n            return ''\n\n        counter = Counter(list(s))\n        largestFreq = counter.most_common()[0][1]\n        if largestFreq == 1 :\n            return s\n\n        mergedList = []\n        bins = []\n        for char, freq in counter.most_common():\n            if freq == largestFreq :\n                bins.append([char for i in range(freq)]) \n            else:\n                mergedList += [char for i in range(freq)]\n\n\n        targetLen = largestFreq - 1 \n\n        splitted  = [mergedList[i * targetLen:(i + 1) * targetLen] \n                     for i in range((len(mergedList) + targetLen - 1) // targetLen )]  \n\n        bins += splitted\n        if len(bins) < k:\n            return ''\n        if len(bins) == k and len(bins[-1]) < targetLen:\n            return '' \n\n        ansStr,ind = '',0\n        while bins:\n            ind = ind % len(bins)\n            curList = bins[ind]\n            ansStr += curList.pop(0)\n            if not curList:\n                bins.pop(ind)\n            else:\n                ind += 1 \n        return ansStr\n\n\n\n\n\n\n        \n\n\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"rearrange-string-k-distance-apart"}