{"id":530100178,"lang":"python3","time":"4 days, 21 hours","timestamp":1627557183,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/530100178/","is_pending":"Not Pending","title":"Replace Words","memory":"36.1 MB","code":"from typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.finish = False\n\n\nclass Trie:\n    def __init__(self):\n        self.root: TrieNode = TrieNode()\n\n    def insert(self,word: str) -> None:\n        curNode: TrieNode = self.root\n        for ch in word:\n            if not ch in curNode.children:\n                curNode.children[ch] = TrieNode()\n            curNode = curNode.children[ch]\n        curNode.finish = True\n    \n    def prefixSearch(self, prefix: str) -> str:\n        '''\n        find shortest word that starts with prefix\n\n        returns \"\" if such word is not found\n        returns found word otherwise\n        '''\n\n        curNode: TrieNode = self.root\n        for i,ch in enumerate(prefix):\n            if not ch in curNode.children:\n                return \"\"\n            curNode = curNode.children[ch]\n            if curNode.finish:\n                return prefix[:i+1]\n        return \"\"\n\n\nclass Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n        self.trie = Trie()\n        for word in dictionary:\n            self.trie.insert(word)\n        \n        convertedWords: List[str] = []\n        for word in sentence.split(' '):\n            if foundWord := self.trie.prefixSearch(word):\n                convertedWords.append(foundWord)\n            else:\n                convertedWords.append(word)\n        return ' '.join(convertedWords)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"replace-words"}