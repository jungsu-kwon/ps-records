{"id":324155297,"lang":"python3","time":"1 year, 3 months","timestamp":1586778835,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/324155297/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"20.5 MB","code":"class Solution:\n    def helper(self,root):\n        if root == None : \n            return None\n        if root.left == None and root.right == None : \n            self.maxi = max(self.maxi,root.val)\n            return root.val\n        elif root.left != None and root.right != None : \n            left_val = self.helper(root.left)\n            right_val = self.helper(root.right)\n            self.maxi = max(self.maxi,\n                            left_val,\n                            right_val,\n                            root.val,\n                            left_val+root.val,\n                            right_val + root.val,\n                            left_val + root.val + right_val\n                           )\n            return max(0,left_val,right_val)+root.val\n        elif root.left != None : \n            left_val = self.helper(root.left)\n            self.maxi = max(self.maxi,\n                            root.val,\n                            left_val,\n                            left_val+root.val\n                           )\n            return max(left_val,0)+root.val\n        elif root.right != None : \n            right_val = self.helper(root.right)\n            self.maxi = max(self.maxi,\n                            root.val,\n                            right_val,\n                            right_val + root.val\n                           )\n            return max(right_val,0)+root.val\n\n    def maxPathSum(self,root):\n        self.maxi = root.val\n        self.helper(root)\n        return self.maxi","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum"}