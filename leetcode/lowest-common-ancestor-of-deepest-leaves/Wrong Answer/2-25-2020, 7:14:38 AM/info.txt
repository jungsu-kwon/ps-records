{"id":306549429,"lang":"python3","time":"1 year, 5 months","timestamp":1582582478,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/306549429/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def post_traverse(self,root,depth):\n        if root : \n            cur_deep = False\n            left_deep = self.post_traverse(root.left,depth+1)\n            right_deep = self.post_traverse(root.right,depth+1)\n            if root.left == None and root.right == None : \n                if self.depth <= depth : \n                    self.depth = depth\n                    cur_deep = True\n                    \n            if (left_deep and right_deep) or cur_deep : \n                self.ret = root\n            return left_deep or right_deep or cur_deep\n            \n            \n            \n    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:\n        self.depth = 0 \n        self.maxis = [] \n        self.ret = root \n        self.need_update = True\n        self.post_traverse(root,0)\n        return self.ret \n        \n        \n        ","compare_result":"111110101010100110110111001110100000001010100100100000000000000000000000000000","title_slug":"lowest-common-ancestor-of-deepest-leaves"}