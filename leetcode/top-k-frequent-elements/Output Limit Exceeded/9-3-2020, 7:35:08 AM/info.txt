{"id":390162819,"lang":"cpp","time":"11Â months","timestamp":1599086108,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/390162819/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"N/A","code":"class Solution {\npublic:\n    int partition(std::vector<int>& keys,\n                  std::map<int,int> &hash,\n                  int left, int right,int pivotIndex\n                 ){\n        std::swap(keys[pivotIndex],keys[right]);\n        auto pivotValue = hash[keys[right]];\n        auto storeIndex = left ;\n        for (auto t = 0 ; t < keys.size()-1;++t ){\n            if (hash[keys[t]] < pivotValue){\n                std::swap(keys[t],keys[storeIndex]);\n                storeIndex += 1;\n            }\n        }\n        std::swap(keys[storeIndex],keys[right]);\n        std::cout << \"#########\"<<std::endl;\n        //std::cout << \"k : \" << pivotIndex <<std::endl;\n        for (auto key : keys){\n            std::cout << \"key : \" << key <<\" \"<< hash[key] \n                << std::endl;\n        }\n        std::cout << \"#########\"<<std::endl;\n        return storeIndex;\n    }\n    int SelectTopK(std::vector<int>& keys,\n                    std::map<int,int> &hash,\n                   int left,int right, int k){\n        if (left == right){\n            return keys[left];\n        }\n        auto pivotIndex = (left + right) / 2 ;\n        std::cout << \"pivontIndex : \" << pivotIndex << std::endl;\n        std::cout << \" k : \" << k << std::endl;\n        pivotIndex = partition(keys,hash,left,right,pivotIndex);\n        if (pivotIndex == k)\n        {\n            std::cout << \"ret val : \" << keys[k] <<std::endl;\n            return keys[k];\n        }\n        else if (pivotIndex < k){\n           return SelectTopK(keys,hash,pivotIndex+1,right,k) ;\n        }\n        else\n           return SelectTopK(keys,hash,left,pivotIndex-1,k) ;\n        return -1;\n    }\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        // construct hash map\n        std::map<int,int> hash ;\n        for (auto num : nums){\n            hash[num] += 1 ;\n        }\n        // store index into vector\n        std::vector<int> index;\n        for (auto t = hash.begin();t != hash.end();++t){\n            index.push_back(t->first);\n        }\n        // select top k index\n        std::vector<int> ans ;\n        for (auto t = 0 ; t < k ; ++t){\n            ans.push_back(SelectTopK(index,\n                                     hash,\n                                     0,\n                                     index.size()-1,\n                                     index.size()-t-1));\n        }\n        // return the answers\n        return ans;\n    }\n};","compare_result":"111111000000000000000","title_slug":"top-k-frequent-elements"}