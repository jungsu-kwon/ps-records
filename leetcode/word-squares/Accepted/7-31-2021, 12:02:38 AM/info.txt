{"id":530662685,"lang":"python3","time":"3 days, 17 hours","timestamp":1627657358,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/530662685/","is_pending":"Not Pending","title":"Word Squares","memory":"16.3 MB","code":"from typing import List, Dict\n\nclass TrieNode:\n    def __init__(self,ind: int):\n        self.children: Dict[str,TrieNode] = {}\n        self.word: str = \"\"\n        self.ind = ind\n\nclass Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        # construct Trie from words\n        root: TrieNode = TrieNode(-1)\n        n: int = len(words[0])\n        ans: List[List[str]] = []\n\n        for word in words:\n            curNode: TrieNode = root\n            for i,ch in enumerate(word):\n                if not ch in curNode.children:\n                    curNode.children[ch] = TrieNode(i)\n                curNode = curNode.children[ch]\n            curNode.word = word\n        \n        def backtrack(nodes: List[TrieNode], nodeInd: int) -> None:\n            if nodeInd == n - 1 and nodes[nodeInd].word:\n                ans.append([node.word for node in nodes])\n                return \n            \n            curNode: TrieNode = nodes[nodeInd]\n            if curNode.word:\n                return backtrack(nodes,nodeInd + 1)\n            \n            charInd: int = curNode.ind + 1\n            mirrorNode: TrieNode = nodes[charInd]\n            for child in curNode.children:\n                if not child in mirrorNode.children:\n                    continue\n                if charInd != nodeInd:\n                    nodes[charInd] = mirrorNode.children[child]\n                nodes[nodeInd] = curNode.children[child]\n\n                backtrack(nodes,nodeInd)\n\n                nodes[nodeInd] = curNode\n                if charInd != nodeInd:\n                    nodes[charInd] = mirrorNode\n\n        nodes: List[TrieNode] = [root for i in range(n)]\n        for ch in root.children:\n            nodes[0] = root.children[ch]\n            backtrack(nodes,0)\n            nodes[0] = root\n            \n        return ans","compare_result":"1111111111111111","title_slug":"word-squares"}