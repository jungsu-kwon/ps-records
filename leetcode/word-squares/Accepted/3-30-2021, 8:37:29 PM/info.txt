{"id":474256433,"lang":"python3","time":"4Â months","timestamp":1617104249,"status_display":"Accepted","runtime":"916 ms","url":"/submissions/detail/474256433/","is_pending":"Not Pending","title":"Word Squares","memory":"38.1 MB","code":"from typing import List\n\n_end = '_'\ndef make_trie(*words):\n    root = dict()\n    for word in words:\n        current_dict = root\n        for letter in word:\n            current_dict = current_dict.setdefault(letter, {})\n        current_dict[_end] = _end\n    return root\n\ndef in_trie(trie, word):\n    current_dict = trie\n    for letter in word:\n        if letter not in current_dict:\n            return False,{}\n        current_dict = current_dict[letter]\n    return _end in current_dict, current_dict\n\ndef get_words(trie,prefix=\"\"):\n    words = []\n    for char in prefix:\n        if char in trie:\n            trie = trie[char]\n        else:\n            return []\n\n    for char,trie_node in trie.items():\n        if char == _end:\n            words.append(prefix)\n        else:\n            for word in get_words(trie_node):\n                words.append(prefix + char + word)\n    return words\n\nclass Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        n = len(words[0])\n        trie = make_trie(*words)\n        bfs = [[word] for word in get_words(trie)]\n        step = 1\n        while (bfs and step < n):\n            children = []\n            for node in bfs:\n                prefix = ''.join([word[step] for word in node])\n                for word in get_words(trie,prefix=prefix):\n                    children.append(node + [word])\n            step += 1\n            bfs = children\n        return bfs\n\n                    \n                \n\n                \n\n\n\n\n\n\n            \n\n\n\n\n","compare_result":"1111111111111111","title_slug":"word-squares"}