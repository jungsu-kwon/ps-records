{"id":530662533,"lang":"python3","time":"3 days, 17 hours","timestamp":1627657331,"status_display":"Accepted","runtime":"1636 ms","url":"/submissions/detail/530662533/","is_pending":"Not Pending","title":"Word Squares","memory":"16.6 MB","code":"class TrieNode(object):\n    def __init__(self, value):\n        self.nxt = [None]*26\n        self.value = value\n        return\n\nclass PrefixTrieTable(object):\n    def __init__(self, words):\n        self.root = TrieNode(None)\n        for w in words:\n            self.add_to_trie(w)\n        return\n    \n    def add_to_trie(self, w):\n        root = self.root\n        for ch in w:\n            offset = ord(ch)-ord('a')\n            if root.nxt[offset] != None:\n                root = root.nxt[offset]\n            else:\n                root.nxt[offset] = TrieNode(None)\n                root = root.nxt[offset]\n        root.value = w\n        return\n    \n    def collect(self, root, candidates):\n        if root.value:\n            candidates.append(root.value)\n        else:\n            for i in range(26):\n                if root.nxt[i]:\n                    self.collect(root.nxt[i], candidates)\n        return\n    \n    def get_prefix_matches(self, prefix):\n        candidates, root = [], self.root\n        for ch in prefix:\n            offset = ord(ch)-ord('a')\n            root = root.nxt[offset]\n            if root == None:\n                return candidates\n        self.collect(root, candidates)            \n        return candidates\n\nclass Solution(object):\n    def helper(self, so_far, N, words, results, table):\n        if len(so_far) == N:\n            results.append([x for x in so_far])\n        else:\n            prefix = \"\".join([x[len(so_far)] for x in so_far])\n            for c in table.get_prefix_matches(prefix):\n                so_far.append(c)\n                self.helper(so_far, N, words, results, table)\n                so_far.pop()\n        return\n    \n    def wordSquares(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        results = []\n        if words:\n            table = PrefixTrieTable(words)\n            self.helper([], len(words[0]), words, results, table)\n        return results","compare_result":"1111111111111111","title_slug":"word-squares"}