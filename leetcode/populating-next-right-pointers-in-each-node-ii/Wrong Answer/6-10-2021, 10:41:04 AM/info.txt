{"id":505685706,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1623289264,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/505685706/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"N/A","code":"#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n// Definition for a Node.\n// class Node {\n// public:\n//     int val;\n//     Node* left;\n//     Node* right;\n//     Node* next;\n\n//     Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n//     Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n//     Node(int _val, Node* _left, Node* _right, Node* _next)\n//         : val(_val), left(_left), right(_right), next(_next) {}\n// };\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        // if root is nullptr return root\n        if (!root) return root;\n\n        queue<Node*> bfs;\n        bfs.push(root);\n\n        while (bfs.size())\n        {\n            Node* prev = nullptr;\n            auto bfs_size = bfs.size();\n            for (int i = 0; i < bfs_size; ++i)\n            {\n                auto node = bfs.front();\n                bfs.pop();\n\n                auto left_child = node -> left;\n                auto right_child = node -> right;\n\n                if (prev) prev -> next = left_child;\n                if (left_child) \n                {\n                    left_child -> next = right_child;\n                    prev = left_child;\n                    bfs.push(left_child);\n                }\n                if (right_child) \n                {\n                    prev = right_child;\n                    bfs.push(right_child);\n                }\n            }\n        }\n        return root;\n    }\n};","compare_result":"0111111011100011001111111010110011100101000000011111111","title_slug":"populating-next-right-pointers-in-each-node-ii"}