// https://leetcode.com/problems/letter-combinations-of-a-phone-number

class Solution(object):
    def letterCombinations(self,digits):
        if not digits : 
            return ""
        if '1' in digits or '0' in digits : 
            return ""
        digit_list = list(map(int,list(digits)))
        str_list = self._convertDig2Str(digit_list)
        
        temp_result = str_list
        while len(temp_result) != 1:
            temp_result = self._addTwoList(temp_result)
            
        result = temp_result
        return result[0]
        
    def _convertDig2Str(self,digit_list):
        
        ## (2 : a,b,c) (3 : d,e,f) (4 : g,h,i) (5 : j,k,l) (6 : m,n,o) (7 : p,q,r) (8 : s,t,u) (9 : w,x,y,z)
        num_str_Dict = {2:["a","b","c"], 3:["d","e","f"], 4:["g","h","i"], 
                        5:["j","k","l"], 6:["m","n","o"], 7:["p","q","r","s"],
                        8:["t","u","v"], 9:["w","x","y","z"]}
        result = []        
        for digit in digit_list:
            result.append(num_str_Dict[digit])        
        return result
        
        
    def _addTwoList(self,str_list):
        Front_list = str_list[0]
        Back_list = str_list[1]

        comb = []
        for front in Front_list:
            for back in Back_list:
                comb.append(front+back)

        if len(str_list) > 2:
            result = [comb]+str_list[2:]
        else:
            result = [comb]
        return result