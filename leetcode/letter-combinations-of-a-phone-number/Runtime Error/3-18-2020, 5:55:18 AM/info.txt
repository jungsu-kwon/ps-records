{"id":313390281,"lang":"python3","time":"1 year, 4 months","timestamp":1584478518,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/313390281/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"N/A","code":"class Solution(): \n    def __init__(self):\n        self.num_to_alpha = {}\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        #assert len(alphabet) == 26\n        ind = 0 \n        for i in range(2,10):\n            if i == 7 or i == 9  : \n                self.num_to_alpha[i] = alphabet[ind:ind+4]\n                ind += 4 \n            else : \n                self.num_to_alpha[i] = alphabet[ind:ind+3]\n                ind += 3 \n\n    def letterCombinations(self,digits):\n        if '1' in digits or '#' in digits or '*' in digit or not digits : \n            return []\n        n = len(digits)\n        num_ans = 1 \n        for digit in digits : \n            num_ans *= len(self.num_to_alpha[int(digit)])\n        ans = [['0' for i in range(n)] for i in range(num_ans)]\n        for i,digit in enumerate(digits):\n            alpha_split = self.num_to_alpha[int(digit)]\n            split_len = len(alpha_split)\n            if i == 0 :\n                cycle_len = num_ans/split_len\n            else : \n                cycle_len /= split_len\n            ind = 0 \n            for j in range(num_ans):\n                ans[j][i] = alpha_split[ind % split_len]\n                if (j+1) % cycle_len == 0 :\n                    ind += 1 \n        ret = [''.join(ans_) for ans_ in ans]\n        return ret\n\n\n            \n\n\n\n\n","compare_result":"0000000000000000000000000","title_slug":"letter-combinations-of-a-phone-number"}