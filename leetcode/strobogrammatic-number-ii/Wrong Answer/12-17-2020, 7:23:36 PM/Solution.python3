// https://leetcode.com/problems/strobogrammatic-number-ii

class Solution:
    def findStrobogrammatic(self, n) :
        ans = []
        stack = [' ' * n]

        for i  in range((n+1)//2):
            if i == 0 :
                sample_from = [('1','1'),('8','8'),('6','9'),('9','6')]
            else : 
                sample_from = [('1','1'),('8','8'),('6','9'),('9','6'),('0','0')]
            len_stack = len(stack)
            for j in range(len_stack):
                elem = stack.pop(0)
                for pair in sample_from : 
                    child = list(elem)
                    child[i],child[-i-1] = pair[0],pair[1]
                    stack.append(''.join(child))
        return stack


if __name__ == '__main__' :
    solver = Solution()
    solver.findStrobogrammatic(4)

            







        