{"id":450295028,"lang":"python3","time":"6Â months","timestamp":1612129527,"status_display":"Accepted","runtime":"276 ms","url":"/submissions/detail/450295028/","is_pending":"Not Pending","title":"Design Snake Game","memory":"16.1 MB","code":"from collections import deque\nclass SnakeGame:\n\n    def __init__(self, width: int, height: int, food: List[List[int]]):\n        \"\"\"\n        Initialize your data structure here.\n        @param width - screen width\n        @param height - screen height \n        @param food - A list of food positions\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].\n        \"\"\"\n        self.queue = deque([(0,0)])\n        self.body = set([(0,0)])\n        self.food = [tuple(f) for f in food ]\n        \n        self.loc = (0,0)\n        self.len = 1\n        self.width,self.height = width,height\n        self.moves = {'U':(-1,0),\n                      'L':(0,-1),\n                      'R':(0,1),\n                      'D':(1,0)\n                     }\n        \n    def move(self, direction: str) -> int:\n        \"\"\"\n        Moves the snake.\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \n        @return The game's score after the move. Return -1 if game over. \n        Game over when snake crosses the screen boundary or bites its body.\n        \"\"\"\n        self.getNextLoc(direction)\n        tail = self.queue.popleft()\n        self.body.remove(tail)\n        if self.loc in self.body:\n            return -1\n        elif self.loc[0] < 0 or self.loc[0] >= self.height or self.loc[1] < 0 or self.loc[1] >= self.width:\n            return -1\n        elif self.food and self.loc ==  self.food[0]:\n            self.len += 1\n            self.food.pop(0)\n            \n            self.queue.appendleft(tail)\n            self.body.add(tail)\n            \n        self.queue.append(self.loc)\n        self.body.add(self.loc)\n        return len(self.body) - 1\n            \n        \n    \n    def getNextLoc(self,direction):\n        move = self.moves[direction]\n        loc = list(self.loc)\n        loc[0] += move[0]\n        loc[1] += move[1]\n        \n        self.loc = tuple(loc)\n        \n        \n        return self.loc\n        \n        \n        \n\n\n# Your SnakeGame object will be instantiated and called as such:\n# obj = SnakeGame(width, height, food)\n# param_1 = obj.move(direction)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-snake-game"}