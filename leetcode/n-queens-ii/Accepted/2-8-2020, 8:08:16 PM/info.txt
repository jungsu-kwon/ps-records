{"id":301299227,"lang":"python3","time":"1 year, 5 months","timestamp":1581160096,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/301299227/","is_pending":"Not Pending","title":"N-Queens II","memory":"12.7 MB","code":"class Solution:\n    def init(self,n) : \n        self.n = n \n        self.attack_zone = [[0 for i in range(n)] for i in range(n)]\n        #self.queens = [[0 for i in range(n)] for i in range(n)]\n\n    def is_not_under_attack(self,row,col):\n        return self.attack_zone[row][col] == 0 \n\n    def remove_queen(self,row,col) : \n        self.change_attack_zone(row,col,-1)\n\n    def place_queen(self,row,col) : \n        self.change_attack_zone(row,col,1)\n\n    def change_attack_zone(self,row,col,val): \n        #self.queens[row][col] = 1 \n        # add count to row and col\n        for i in range(self.n):\n            # add count to row\n            self.attack_zone[row][i] += val \n            # add count to col\n            self.attack_zone[i][col] += val \n\n        # add count to diag1 left bot to right top\n        n_diag1_left = min(self.n-row-1,col) \n        n_diag1_right = min(self.n-col-1,row)\n        '''\n        for i in range(n_diag1_left+1) :\n            self.attack_zone[row+i][col-i] += val\n        for i in range(n_diag1_right+1):\n            self.attack_zone[row-i][col+i] += val \n        '''\n        for i in range(-n_diag1_right,n_diag1_left+1) :\n            #print(row+i,col-i)\n            self.attack_zone[row+i][col-i] += val\n        #for i in range(n_diag1_right+1):\n        #    self.attack_zone[row-i][col+i] += val \n\n        # add count to diag2 left top to right bot\n        n_diag2_left = min(row-1,col-1) \n        n_diag2_right =min(self.n-col-1 ,self.n - row-1)\n        for i in range(-n_diag2_right,n_diag2_left+1) : \n            self.attack_zone[row-i][col-i] += val\n        #for i in range(n_diag2_right+1) : \n        #    self.attack_zone[row+i][col+i] += val\n        self.attack_zone[row][col] -= val*4\n\n\n    def backtrack_nqueen(self,row = 0, count = 0):\n        for col in range(self.n):\n            # iterate through columns at the curent row.\n            if self.is_not_under_attack(row, col):\n                # explore this partial candidate solution, and mark the attacking zone\n                self.place_queen(row, col)\n                if row + 1 == self.n:\n                    # we reach the bottom, i.e. we find a solution!\n                    count += 1\n                else:\n                    # we move on to the next row\n                    count = self.backtrack_nqueen(row + 1, count)\n                # backtrack, i.e. remove the queen and remove the attacking zone.\n                self.remove_queen(row, col)\n        return count\n\n    def totalNQueens(self, n: int) -> int:\n        self.init(n)\n        count = self.backtrack_nqueen(row=0,count = 0)\n        return count \n","compare_result":"111111111","title_slug":"n-queens-ii"}