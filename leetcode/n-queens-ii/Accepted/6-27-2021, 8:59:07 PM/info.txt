{"id":513910187,"lang":"python3","time":"1Â month","timestamp":1624795147,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/513910187/","is_pending":"Not Pending","title":"N-Queens II","memory":"14.2 MB","code":"class Solution:\n\tdef backtrack(self,row,cols,diagonal,anti_diag):\n\t\tif row == self.n:\n\t\t\tself.ans += 1\n\t\t\treturn \n\t\t\t\n\t\tfor col in range(self.n):\n\t\t\tanti = row + col\n\t\t\tdiag = row - col\n\n\t\t\tif anti in anti_diag or \\\n   \t\t\t   diag in diagonal  or \\\n\t\t\t   col in cols:\n\t\t\t\tcontinue\n\n\t\t\tanti_diag.add(anti)\n\t\t\tcols.add(col)\n\t\t\tdiagonal.add(diag)\n\n\t\t\tself.backtrack(row+1, cols, diagonal, anti_diag)\n\n\t\t\tanti_diag.remove(anti)\n\t\t\tcols.remove(col)\n\t\t\tdiagonal.remove(diag)\n\t\t\t\n\tdef totalNQueens(self, n: int) -> int:\n\t\tself.ans = 0\n\t\tself.n = n\n\t\tself.backtrack(0, set([]), set([]), set([]))\n\t\treturn self.ans\n","compare_result":"111111111","title_slug":"n-queens-ii"}