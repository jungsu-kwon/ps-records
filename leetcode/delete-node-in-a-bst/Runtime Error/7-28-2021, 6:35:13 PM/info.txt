{"id":529565325,"lang":"python3","time":"5 days, 23 hours","timestamp":1627464913,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/529565325/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def addNode(self,root: TreeNode, toAdd: TreeNode) -> None:\n        if not toAdd:\n            return root\n        elif not root:\n            root = toAdd\n        elif toAdd.val < root.val:\n            root.left = self.addNode(root.left,toAdd)\n        else:\n            root.right = self.addNOde(root.right,toAdd)\n        return root\n            \n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\n        if not root:\n            return None\n\n        curNode: TreeNode = root\n        if root.val == key:\n            leftChild: TreeNode = root.left\n            rightChild: TreeNode = root.right\n\n            if leftChild and rightChild:\n                toAdd: TreeNode = leftChild.right\n                leftChild.right = rightChild\n                root = leftChild\n                self.addNode(root,toAdd)\n\n            elif leftChild:\n                root = leftChild\n            elif rightChild:\n                root = rightChild\n            else:\n                root = None\n\n        elif root.val < key:\n            root.right = self.deleteNode(root.right,key)\n        else:\n            root.left = self.deleteNode(root.left,key)\n\n        return root\n\n","compare_result":"1111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-node-in-a-bst"}