{"id":529553515,"lang":"python3","time":"5 days, 23 hours","timestamp":1627462467,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/529553515/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def addNode(self,root: TreeNode, toAddNode: TreeNode) -> None:\n        if not toAddNode:\n            return\n        curNode: TreeNode = root\n        parentNode: TreeNode = None\n        while curNode:\n            parentNode = curNode\n            if curNode.val < toAddNode.val:\n                curNode = curNode.right\n            else:\n                curNode = curNode.left\n        if parentNode.val > toAddNode.val:\n            parentNode.left = toAddNode\n        else:\n            parentNode.right = toAddNode\n\n\n\n\n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\n        if not root: return None\n\n        curNode: TreeNode = root\n\n        targetNode: TreeNode = None\n        parentNode: TreeNode = None\n        isLeftChild: bool = False\n        while curNode: \n            if curNode.val == key:\n                targetNode = curNode\n                break\n            elif curNode.val < key:\n                parentNode = curNode\n                isLeftChild = False\n                curNode = curNode.right\n            else:\n                parentNode = curNode\n                curNode = curNode.left\n                isLeftChild = True\n                \n        if not targetNode:\n            return root\n        \n        rightChild: TreeNode = targetNode.right\n        leftChild: TreeNode = targetNode.left\n        # print(rightChild,leftChild)\n        if isLeftChild:\n            toAddNode: TreeNode = leftChild.right\n            if parentNode:\n                parentNode.left = leftChild\n            if leftChild:\n                leftChild.right = rightChild\n            self.addNode(leftChild,toAddNode)\n        else:\n            toAddNode: TreeNode = rightChild.left\n            if parentNode:\n                parentNode.right = rightChild\n            if rightChild:\n                rightChild.left = leftChild\n            self.addNode(rightChild,toAddNode)\n        return root","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-node-in-a-bst"}