{"id":447341303,"lang":"python3","time":"6 months, 1 week","timestamp":1611525329,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/447341303/","is_pending":"Not Pending","title":"Binary Tree Vertical Order Traversal","memory":"N/A","code":"from collections import defaultdict\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root : \n            return [[]]\n\n        bfs = [(root,0)]\n        ansDict = defaultdict(list)\n\n        minRank,maxRank = root.val,root.val\n        \n        while bfs:\n            n = len(bfs)\n            for i in range(n):\n                node,rank = bfs.pop(0)\n                if node.left:\n                    bfs.append((node.left,rank-1))\n                if node.right:\n                    bfs.append((node.right,rank+1))\n\n                ansDict[rank].append(node.val)\n\n                minRank = min(minRank,rank)\n                maxRank = max(maxRank,rank)\n\n        ans = []\n        for i in range(minRank,maxRank):\n            if ansDict[i]:\n                ans.append(ansDict[i])\n        return ans\n\n        \n\n                    \n\n        ","compare_result":"11101100000000111001011101011000010011101011001100001110010000111000011001001110110110101101011011000111111001110000101111111011111101111110101111011000110011100101011111101011101011110010101001001111110110101010","title_slug":"binary-tree-vertical-order-traversal"}