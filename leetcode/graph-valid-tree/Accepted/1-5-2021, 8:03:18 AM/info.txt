{"id":438621939,"lang":"python3","time":"7Â months","timestamp":1609801398,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/438621939/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"15.5 MB","code":"class Solution:\n    def validTree(self, n, edges) :\n        if n <= 1 :\n            return True\n\n        graph = [{} for i in range(n)]\n        for edge in edges:\n            graph[edge[0]][edge[1]] = 1 \n            graph[edge[1]][edge[0]] = 1 \n\n        queue,visited = [0],set([])\n\n        while queue:\n            queueSize = len(queue)\n            for i in range(queueSize):\n                node = queue.pop(0)\n                if node in visited:\n                    return False\n                for child in graph[node].keys():\n                    queue.append(child)\n                    graph[child].pop(node,None)\n                visited.add(node)\n\n        if len(visited) != n:\n            return False\n        return True\n\n\n\n                \n\n\n\n\n\n\n\n\n        ","compare_result":"11111111111111111111111111111111111111111111","title_slug":"graph-valid-tree"}