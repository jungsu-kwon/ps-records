// https://leetcode.com/problems/partition-array-for-maximum-sum

class Solution:
    def maxSumAfterPartitioning(self, A, K):
        self.n = len(A)
        if self.n == 0 : 
            return 0
        
        self.maxi = [0 for i in range(K)]
        self.dp = [[0 for i in range(K)] for i in range(self.n)]
        self.dp[0][0] = A[0]
        
        for i in range(1,self.n):
            self.dp[i][0] = max(self.dp[i-1]) + A[i]
            for j in range(1,K): 
                if i  < j : 
                    continue
                self.dp[i][j] = self.dp[i-1][j-1] -(j)*max(A[i-j:i]) + (j+1)*max(A[i-j:i+1])
                #self.maxi[j] = max(self.maxi[j-1],A[i-j])
        
        return max(self.dp[self.n-1])
                




         
                
                
        
        