{"id":323386017,"lang":"python3","time":"1 year, 3 months","timestamp":1586656891,"status_display":"Accepted","runtime":"212 ms","url":"/submissions/detail/323386017/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"14.3 MB","code":"class Solution:\n    def max_area(self,heights):\n        n = len(heights)\n        stack = [-1]\n        maxi = 0 \n        for i in range(n):\n            if i > 0 and heights[i-1] > heights[i] : \n                len_stack = len(stack)\n                for j in range(1,len_stack):\n                    top = stack[-1]\n                    if heights[top] > heights[i] : \n                        top = stack.pop(-1)\n                        maxi = max(maxi,(i-stack[-1]-1)*heights[top])\n                    else : \n                       break\n            stack.append(i)\n        len_stack = len(stack)\n        for i in range(len_stack-1):\n            top = stack.pop(-1)\n            maxi = max(maxi,(n-stack[-1]-1)*heights[top])\n        return maxi\n    \n    def maximalRectangle(self, matrix):\n        rows = len(matrix)\n        if rows == 0 :\n            return 0 \n        cols = len(matrix[0])\n        if cols == 0 :\n            return 0 \n        dp=  [0 for i in range(cols)]\n        maxi = 0 \n        for i in range(rows):\n            dp = [dp[j] + 1 if matrix[i][j] == '1' else 0 for j in range(cols)  ]\n            maxi = max(maxi,self.max_area(dp))\n        return maxi\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}