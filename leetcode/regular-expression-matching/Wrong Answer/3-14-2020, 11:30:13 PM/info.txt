{"id":312336541,"lang":"python3","time":"1 year, 4 months","timestamp":1584196213,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/312336541/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"N/A","code":"class Solution:\n    def counter(self,arr) : \n        counted = [] \n        prev = None \n        for i,char in enumerate(arr):\n            if char == '*' : \n                if prev == None : \n                    return False\n                else : \n                    counted[-1][1] = -1 \n            else : \n                if prev == char : \n                    if not counted[-1][1] == -1 : \n                        counted[-1][1] += 1 \n                    else : \n                        counted.append([char,1])\n                else : \n                    counted.append([char,1])\n                    prev = char\n        return counted\n\n    def isMatch(self, s,p):\n        if len(p) == 0 : \n            if len(s) != 0 : \n                return False\n        \n        s_count = self.counter(s)\n        p_count = self.counter(p)\n        ans = self.helper(s_count,p_count)\n        return ans\n\n    def helper(self,s_count_,p_count_,deep_copy=False):\n        if deep_copy : \n            import copy\n            s_count = copy.deepcopy(s_count_)\n            p_count = copy.deepcopy(p_count_)\n        else : \n            s_count = s_count_\n            p_count = p_count_\n        \n        if s_count and p_count : \n            s_char,s_freq = s_count[0]\n            p_char,p_freq = p_count[0]\n            if p_freq == -1 and p_char == '.' : \n                ans = self.helper(s_count[1:],p_count[1:])\n                if ans : \n                    return ans\n                for i in range(s_freq-1):\n                    s_count[0][1] -= 1 \n                    ans =self.helper(s_count,p_count[1:],deep_copy=True)\n                    if ans : \n                        return ans\n                ans = self.helper(s_count[1:],p_count)\n                if ans :\n                    return ans \n                return False\n                \n            elif p_freq == -1 : \n                if s_char == p_char : \n                    ans = self.helper(s_count[1:],p_count[1:])\n                    if ans : \n                        return ans\n                    for i in range(s_freq-1) : \n                        s_count[0][1] -= 1\n                        ans = self.helper(s_count,p_count[1:],deep_copy=True)\n                        if ans  : \n                            return ans \n                    return False\n                elif s_char != p_char : \n                    return self.helper(s_count,p_count[1:])\n            elif p_char == '.' : \n                if s_freq == p_freq : \n                    return self.helper(s_count[1:],p_count[1:])\n                elif s_freq > p_freq : \n                    s_count[0][1] -= p_freq\n                    return self.helper(s_count,p_count[1:])\n                elif s_freq < p_freq : \n                    p_freq[0][1] -= s_freq\n                    return self.helper(s_count[1:],p_count)\n            elif p_char == s_char : \n                if s_freq == p_freq : \n                    return self.helper(s_count[1:],p_count[1:])\n                elif s_freq > p_freq : \n                    s_count[0][1] -= p_freq\n                    return self.helper(s_count,p_count[1:])\n                elif s_freq < p_freq : \n                    return False\n            elif p_char != s_char : \n                return False\n        elif s_count : \n            return False\n        elif p_count : \n            for i in range(len(p_count)):\n                p_char,p_freq = p_count[i]\n                if p_freq != -1 : \n                    return False\n            return True\n        else : \n            return True\n                \n                \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"111111111111111111111111111011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"regular-expression-matching"}