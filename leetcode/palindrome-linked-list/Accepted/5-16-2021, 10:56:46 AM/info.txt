{"id":493726335,"lang":"python3","time":"2 months, 2 weeks","timestamp":1621130206,"status_display":"Accepted","runtime":"976 ms","url":"/submissions/detail/493726335/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"47.2 MB","code":"class Solution:\n\n    def isPalindrome(self, head: ListNode) -> bool:\n        if head is None:\n            return True\n\n        # Find the end of first half and reverse second half.\n        first_half_end = self.end_of_first_half(head)\n        second_half_start = self.reverse_list(first_half_end.next)\n\n        # Check whether or not there's a palindrome.\n        result = True\n        first_position = head\n        second_position = second_half_start\n        while result and second_position is not None:\n            if first_position.val != second_position.val:\n                result = False\n            first_position = first_position.next\n            second_position = second_position.next\n\n        # Restore the list and return the result.\n        first_half_end.next = self.reverse_list(second_half_start)\n        return result    \n\n    def end_of_first_half(self, head):\n        fast = head\n        slow = head\n        while fast.next is not None and fast.next.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n        return slow\n\n    def reverse_list(self, head):\n        previous = None\n        current = head\n        while current is not None:\n            next_node = current.next\n            current.next = previous\n            previous = current\n            current = next_node\n        return previous","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list"}