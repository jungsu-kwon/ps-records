{"id":389391177,"lang":"cpp","time":"11Â months","timestamp":1598959062,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/389391177/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int getLength(ListNode* head){\n        if (head == nullptr)\n            return 0;\n        int nLength = 0 ;\n        while (head != nullptr)\n        {\n            nLength += 1 ;\n            head = head->next;\n        }\n        return nLength;\n    }\n    ListNode* proceedNTimes(ListNode* head,int n){\n        ListNode* curNode  = head;\n        // will not perform validity check for performance issue\n        for (auto t = 0; t < n;++t)\n            curNode = curNode->next;\n        return curNode;\n    }\n    ListNode* invertNodes(ListNode* head){\n        ListNode* curNode = head;\n        ListNode* prevNode = nullptr;\n        ListNode* tempNode = nullptr;\n        while(curNode != nullptr){\n            tempNode = curNode->next;\n            curNode->next = prevNode;\n            prevNode = curNode;\n            curNode = tempNode;\n        }\n        //for (auto node = prevNode; node != nullptr; node = node->next)\n        //    std::cout << node->val << endl;\n        return prevNode;\n    }\n\n    bool isPalindrome(ListNode* head) {\n       // compute length of ll \n        int nLength = getLength(head);\n        // get mid node\n        ListNode* leftNode = proceedNTimes(head,(nLength/2)-1);\n        ListNode* rightNode = (nLength % 2) ? leftNode->next->next : leftNode->next;\n        leftNode->next = nullptr;\n        \n        \n        // invert left half\n        leftNode = invertNodes(head);\n        \n        while(leftNode != nullptr){\n            if (leftNode->val != rightNode->val)\n                return false;\n            leftNode = leftNode->next;\n            rightNode = rightNode->next;\n        }\n        return true;\n        \n        \n    }\n};","compare_result":"10000000000000000000000000","title_slug":"palindrome-linked-list"}