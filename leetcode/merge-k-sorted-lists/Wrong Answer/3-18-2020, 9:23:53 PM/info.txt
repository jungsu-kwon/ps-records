{"id":313585381,"lang":"python3","time":"1 year, 4 months","timestamp":1584534233,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/313585381/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(): \n    def get_mini_ind(self):\n        mini = None\n        mini_ind = -1 \n        none_count = 0 \n        for ind in self.valid_lists:\n            node = self.lists[ind]\n            val = node.val\n            if not mini or mini > val : \n                mini = val\n                mini_ind = ind\n        return mini_ind\n\n    def mergeKLists(self,lists):\n        self.valid_lists = []\n        self.lists = lists\n        cur = None\n        head = None\n        for i,node in enumerate(lists) : \n            if node : \n                self.valid_lists.append(i)\n        \n        while self.valid_lists : \n            mini_ind = self.get_mini_ind()\n            min_node = self.lists[mini_ind]\n\n            if cur : \n                cur.next = min_node \n                cur = cur.next\n            else : \n                cur = min_node\n                head = cur\n            next_node = min_node.next\n            if next_node : \n                self.lists[mini_ind] = next_node\n            else : \n                self.lists[mini_ind] = None \n                self.valid_lists.pop(self.valid_lists.index(mini_ind))\n            if len(self.valid_lists) == 1 : \n                cur.next = self.lists[self.valid_lists[0]]\n                return head\n\n        return head","compare_result":"11111111011111110111111111111111111110000101001100011001100101110100000000100100001010000000101000101100000010100111011100101011110","title_slug":"merge-k-sorted-lists"}