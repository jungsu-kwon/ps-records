{"id":402434442,"lang":"cpp","time":"10 months, 1 week","timestamp":1601420445,"status_display":"Accepted","runtime":"944 ms","url":"/submissions/detail/402434442/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"14.1 MB","code":"class Solution {\nprivate : \n\tListNode* findMinNode(std::vector<ListNode*> &vecNodes,std::unordered_set<int> &setValidInds){\n\t\tListNode* foundNode = nullptr;\n\t\tint nFoundInd = -1;\n\t\tfor (auto t : setValidInds)\n\t\t{\n\t\t\tauto node = vecNodes[t];\n\t\t\tif (foundNode == nullptr){\n\t\t\t\tfoundNode = node;\n\t\t\t\tnFoundInd = t;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnFoundInd = (foundNode->val < node->val) ? nFoundInd : t;\n\t\t\t\tfoundNode = (foundNode->val < node->val) ? foundNode : node;\n\t\t\t}\n\n\t\t}\n        if (foundNode != nullptr){\n            vecNodes[nFoundInd] = vecNodes[nFoundInd]->next;\n\t\t\tif (vecNodes[nFoundInd] == nullptr)\n\t\t\t\tsetValidInds.erase(nFoundInd);\n        }\n\t\t    \n        \n\t\treturn foundNode;\n\t\t\n\t}\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n\t\tif (!lists.size() ) return nullptr;\n\t\tstd::unordered_set<int> setValidInds;\n\t\tauto ind = 0;\n\t\tfor (auto node : lists){\n\t\t\tif (node != nullptr)\n\t\t\t\tsetValidInds.insert(ind);\n\t\t\tind += 1 ;\n\t\t}\n\t\tListNode * head = new ListNode;\n\t\tauto curNode = head;\n\t\tauto foundNode = findMinNode(lists,setValidInds);\n\t\twhile (foundNode != nullptr){\n\t\t\tcurNode->next = foundNode;\n\t\t\tcurNode = curNode->next;\n\t\t\tfoundNode = findMinNode(lists,setValidInds);\n\t\t}\n\n\t\treturn head->next;\n        \n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}