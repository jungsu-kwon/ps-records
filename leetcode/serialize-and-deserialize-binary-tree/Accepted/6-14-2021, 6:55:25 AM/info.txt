{"id":507505360,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1623621325,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/507505360/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"40.4 MB","code":"#include <string>\n#include <iostream>\n#include <queue>\nusing namespace std;\n\n// struct TreeNode {\n//     int val;\n//     TreeNode *left;\n//     TreeNode *right;\n//     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n// };\n\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        if (!root) return \"x\";\n\n        auto left_tree  = serialize(root -> left);\n        auto right_tree = serialize(root -> right);\n        return to_string(root->val) + \",\" + left_tree + \",\" + right_tree;\n    }\n\n    TreeNode* helper(queue<string> &q)\n    {\n        if (!q.size()) return nullptr;\n        \n        auto word = q.front();\n        q.pop();\n\n        if (word == \"x\") return nullptr;\n        auto root = new TreeNode(stoi(word));\n        auto left  = helper(q);\n        auto right = helper(q);\n\n        root -> left  = left;\n        root -> right = right;\n\n        return root;\n    }\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        queue<string> q;\n        string word = \"\";\n        for (auto ch : data)\n        {\n            if (ch == ',')\n            {\n                q.push(word);\n                word = \"\";\n            }\n\n            else word += ch;\n        }\n\n        return helper(q);\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree"}