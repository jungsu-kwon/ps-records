{"id":398277797,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1600599768,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/398277797/","is_pending":"Not Pending","title":"Find All Anagrams in a String","memory":"8.7 MB","code":"#include <vector>\n#include <string>\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nclass Solution {\nprivate : \n\tbool same(std::unordered_map<char,int> &templateCounter,std::unordered_map<char,int> &wordCounter){\n\t\tfor (auto it = templateCounter.begin(); it != templateCounter.end(); ++it){\n\t\t\tauto key = it->first;\n\t\t\tif (templateCounter[key] != wordCounter[key])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\npublic:\n    vector<int> findAnagrams(string s, string p) {\n\t\t//basic sanity checks\n\t\tif (s.size() < p.size() || s.size() == 0)\n\t\t\treturn std::vector<int>{};\n\t\tstd::vector<int> vecAns;\n\t\tstd::unordered_map<char,int> templateCounter;\n\t\tfor (auto ch : p)\n\t\t\ttemplateCounter[ch] += 1 ;\n\n\t\tstd::unordered_map<char,int> wordCounter;\n\t\tfor (auto t = 0 ; t < p.size(); ++t){\n\t\t\twordCounter[s[t]] += 1 ;\n\t\t}\n\t\tif (same(templateCounter,wordCounter))\n\t\t\tvecAns.push_back(0);\n\n\t\tfor (auto t = 1; t < s.size() - p.size() + 1 ; ++t){\n\t\t\twordCounter[s[t-1]] -= 1 ;\n\t\t\twordCounter[s[t+p.size()-1]] += 1;\n\t\t\tif (same(templateCounter,wordCounter))\n\t\t\t\tvecAns.push_back(t);\n\t\t}\n\t\treturn vecAns;\n\n\n        \n    }\n};\n","compare_result":"111111111111111111111111111111111111","title_slug":"find-all-anagrams-in-a-string"}