{"id":529571771,"lang":"python3","time":"5 days, 22 hours","timestamp":1627466259,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/529571771/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"18.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, \n        root: 'TreeNode', \n        p: 'TreeNode', \n        q: 'TreeNode') -> 'TreeNode':\n\n        small,big = sorted([p,q],key = lambda x: x.val)\n        if root.val <= big.val and root.val >= small.val:\n            return root\n        elif root.val < small.val:\n            return self.lowestCommonAncestor(root.right,\n                small,big)\n        else:\n            return self.lowestCommonAncestor(root.left,\n                small,big)","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}