// https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, 
        root: 'TreeNode', 
        p: 'TreeNode', 
        q: 'TreeNode') -> 'TreeNode':

        small,big = sorted([p,q],key = lambda x: x.val)
        if root.val < big.val and root.val > small.val:
            return root
        elif root.val < small.val:
            return self.lowestCommonAncestor(root.right,
                small,big)
        else:
            return self.lowestCommonAncestor(root.left,
                small,big)