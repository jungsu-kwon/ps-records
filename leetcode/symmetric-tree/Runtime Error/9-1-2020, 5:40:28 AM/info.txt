{"id":389095002,"lang":"cpp","time":"11Â months","timestamp":1598906428,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/389095002/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isLeaf(TreeNode *root){\n        return (root->left == nullptr && root->right == nullptr);\n    }\n    bool isSymmetric(TreeNode* root) {\n        if (isLeaf(root) || root == nullptr)\n            return true;\n        if (root->right == nullptr || root->left == nullptr )\n            return false;\n        if (root->right->val == root->left->val){\n            return (isSymmetric(root->left->left,root->right->right) && \n                isSymmetric(root->right->left,root->left->right));\n        }\n        return false;\n    }\n    bool isSymmetric(TreeNode* root1,TreeNode* root2){\n        if(root1 == nullptr && root2 == nullptr){\n           return true;\n        }\n        else if (root1 == nullptr || root2 == nullptr)\n            return false;\n        if (root1->val == root2->val){\n            return (isSymmetric(root1->left,root2->right) && isSymmetric(root1->right,root2->left));\n        }\n        return false;\n        \n          \n        \n    }\n      \n};","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"symmetric-tree"}