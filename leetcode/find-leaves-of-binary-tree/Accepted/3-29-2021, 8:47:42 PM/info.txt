{"id":473833813,"lang":"python3","time":"4Â months","timestamp":1617018462,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/473833813/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"14.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def get_depth(self,root : TreeNode) -> int:\n        if not root:\n            return -1\n        depth = max(self.get_depth(root.left), \n                    self.get_depth(root.right)) + 1\n\n        if len(self.ans) <= depth:\n            self.ans.append([])\n        self.ans[depth].append(root.val)\n\n        return depth\n\n    def findLeaves(self, root: TreeNode) -> List[List[int]]:\n        self.ans = []\n        self.get_depth(root)\n\n        return self.ans\n\n        \n\n\n\n\n\n\n\n\n        \n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree"}